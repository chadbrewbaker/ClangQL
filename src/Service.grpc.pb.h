// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Service.proto
// Original file comments:
// ===--- Service.proto - Remote index service definition ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// ===----------------------------------------------------------------------===//
//
#ifndef GRPC_Service_2eproto__INCLUDED
#define GRPC_Service_2eproto__INCLUDED

#include "Service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace clang {
namespace clangd {
namespace remote {
namespace v1 {

// Semantics of SymbolIndex match clangd::SymbolIndex with all required
// structures corresponding to their clangd::* counterparts.
class SymbolIndex final {
 public:
  static constexpr char const* service_full_name() {
    return "clang.clangd.remote.v1.SymbolIndex";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::LookupReply>> Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::LookupReply>>(LookupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>> AsyncLookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>>(AsyncLookupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::FuzzyFindReply>> FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::FuzzyFindReply>>(FuzzyFindRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>> AsyncFuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>>(AsyncFuzzyFindRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>> PrepareAsyncFuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>>(PrepareAsyncFuzzyFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::RefsReply>> Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::RefsReply>>(RefsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>> AsyncRefs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>>(AsyncRefsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>> PrepareAsyncRefs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>>(PrepareAsyncRefsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::RelationsReply>> Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::clang::clangd::remote::RelationsReply>>(RelationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>> AsyncRelations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>>(AsyncRelationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>> PrepareAsyncRelations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>>(PrepareAsyncRelationsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::LookupReply>* reactor) = 0;
      #else
      virtual void Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::LookupReply>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::FuzzyFindReply>* reactor) = 0;
      #else
      virtual void FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::FuzzyFindReply>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::RefsReply>* reactor) = 0;
      #else
      virtual void Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::RefsReply>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::RelationsReply>* reactor) = 0;
      #else
      virtual void Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::RelationsReply>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::clang::clangd::remote::LookupReply>* LookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>* AsyncLookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::LookupReply>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::clang::clangd::remote::FuzzyFindReply>* FuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>* AsyncFuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::FuzzyFindReply>* PrepareAsyncFuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::clang::clangd::remote::RefsReply>* RefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>* AsyncRefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RefsReply>* PrepareAsyncRefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::clang::clangd::remote::RelationsReply>* RelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>* AsyncRelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::clang::clangd::remote::RelationsReply>* PrepareAsyncRelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::LookupReply>> Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::LookupReply>>(LookupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>> AsyncLookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>>(AsyncLookupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::FuzzyFindReply>> FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::FuzzyFindReply>>(FuzzyFindRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>> AsyncFuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>>(AsyncFuzzyFindRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>> PrepareAsyncFuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>>(PrepareAsyncFuzzyFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::RefsReply>> Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::RefsReply>>(RefsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>> AsyncRefs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>>(AsyncRefsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>> PrepareAsyncRefs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>>(PrepareAsyncRefsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::RelationsReply>> Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::clang::clangd::remote::RelationsReply>>(RelationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>> AsyncRelations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>>(AsyncRelationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>> PrepareAsyncRelations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>>(PrepareAsyncRelationsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::LookupReply>* reactor) override;
      #else
      void Lookup(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::LookupReply>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::FuzzyFindReply>* reactor) override;
      #else
      void FuzzyFind(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::FuzzyFindReply>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::RefsReply>* reactor) override;
      #else
      void Refs(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::RefsReply>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest* request, ::grpc::ClientReadReactor< ::clang::clangd::remote::RelationsReply>* reactor) override;
      #else
      void Relations(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest* request, ::grpc::experimental::ClientReadReactor< ::clang::clangd::remote::RelationsReply>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::clang::clangd::remote::LookupReply>* LookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>* AsyncLookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::LookupReply>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::LookupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::clang::clangd::remote::FuzzyFindReply>* FuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>* AsyncFuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::FuzzyFindReply>* PrepareAsyncFuzzyFindRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::FuzzyFindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::clang::clangd::remote::RefsReply>* RefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>* AsyncRefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::RefsReply>* PrepareAsyncRefsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RefsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::clang::clangd::remote::RelationsReply>* RelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>* AsyncRelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::clang::clangd::remote::RelationsReply>* PrepareAsyncRelationsRaw(::grpc::ClientContext* context, const ::clang::clangd::remote::RelationsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Lookup_;
    const ::grpc::internal::RpcMethod rpcmethod_FuzzyFind_;
    const ::grpc::internal::RpcMethod rpcmethod_Refs_;
    const ::grpc::internal::RpcMethod rpcmethod_Relations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Lookup(::grpc::ServerContext* context, const ::clang::clangd::remote::LookupRequest* request, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* writer);
    virtual ::grpc::Status FuzzyFind(::grpc::ServerContext* context, const ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* writer);
    virtual ::grpc::Status Refs(::grpc::ServerContext* context, const ::clang::clangd::remote::RefsRequest* request, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* writer);
    virtual ::grpc::Status Relations(::grpc::ServerContext* context, const ::clang::clangd::remote::RelationsRequest* request, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Lookup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookup(::grpc::ServerContext* context, ::clang::clangd::remote::LookupRequest* request, ::grpc::ServerAsyncWriter< ::clang::clangd::remote::LookupReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FuzzyFind() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFuzzyFind(::grpc::ServerContext* context, ::clang::clangd::remote::FuzzyFindRequest* request, ::grpc::ServerAsyncWriter< ::clang::clangd::remote::FuzzyFindReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Refs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefs(::grpc::ServerContext* context, ::clang::clangd::remote::RefsRequest* request, ::grpc::ServerAsyncWriter< ::clang::clangd::remote::RefsReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Relations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelations(::grpc::ServerContext* context, ::clang::clangd::remote::RelationsRequest* request, ::grpc::ServerAsyncWriter< ::clang::clangd::remote::RelationsReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Lookup<WithAsyncMethod_FuzzyFind<WithAsyncMethod_Refs<WithAsyncMethod_Relations<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Lookup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::clang::clangd::remote::LookupRequest, ::clang::clangd::remote::LookupReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::clang::clangd::remote::LookupRequest* request) { return this->Lookup(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::clang::clangd::remote::LookupReply>* Lookup(
      ::grpc::CallbackServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::clang::clangd::remote::LookupReply>* Lookup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FuzzyFind() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::clang::clangd::remote::FuzzyFindRequest, ::clang::clangd::remote::FuzzyFindReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::clang::clangd::remote::FuzzyFindRequest* request) { return this->FuzzyFind(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::clang::clangd::remote::FuzzyFindReply>* FuzzyFind(
      ::grpc::CallbackServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::clang::clangd::remote::FuzzyFindReply>* FuzzyFind(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Refs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::clang::clangd::remote::RefsRequest, ::clang::clangd::remote::RefsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::clang::clangd::remote::RefsRequest* request) { return this->Refs(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::clang::clangd::remote::RefsReply>* Refs(
      ::grpc::CallbackServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::clang::clangd::remote::RefsReply>* Refs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Relations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::clang::clangd::remote::RelationsRequest, ::clang::clangd::remote::RelationsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::clang::clangd::remote::RelationsRequest* request) { return this->Relations(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::clang::clangd::remote::RelationsReply>* Relations(
      ::grpc::CallbackServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::clang::clangd::remote::RelationsReply>* Relations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Lookup<ExperimentalWithCallbackMethod_FuzzyFind<ExperimentalWithCallbackMethod_Refs<ExperimentalWithCallbackMethod_Relations<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Lookup<ExperimentalWithCallbackMethod_FuzzyFind<ExperimentalWithCallbackMethod_Refs<ExperimentalWithCallbackMethod_Relations<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Lookup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FuzzyFind() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Refs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Relations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Lookup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FuzzyFind() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFuzzyFind(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Refs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Relations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Lookup() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Lookup(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Lookup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Lookup(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FuzzyFind() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FuzzyFind(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FuzzyFind(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FuzzyFind(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Refs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Refs(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Refs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Refs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Relations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Relations(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Relations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Relations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Lookup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::clang::clangd::remote::LookupRequest, ::clang::clangd::remote::LookupReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::clang::clangd::remote::LookupRequest, ::clang::clangd::remote::LookupReply>* streamer) {
                       return this->StreamedLookup(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::LookupRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::LookupReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLookup(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::clang::clangd::remote::LookupRequest,::clang::clangd::remote::LookupReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FuzzyFind : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FuzzyFind() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::clang::clangd::remote::FuzzyFindRequest, ::clang::clangd::remote::FuzzyFindReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::clang::clangd::remote::FuzzyFindRequest, ::clang::clangd::remote::FuzzyFindReply>* streamer) {
                       return this->StreamedFuzzyFind(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FuzzyFind() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FuzzyFind(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::FuzzyFindRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::FuzzyFindReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFuzzyFind(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::clang::clangd::remote::FuzzyFindRequest,::clang::clangd::remote::FuzzyFindReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Refs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Refs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::clang::clangd::remote::RefsRequest, ::clang::clangd::remote::RefsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::clang::clangd::remote::RefsRequest, ::clang::clangd::remote::RefsReply>* streamer) {
                       return this->StreamedRefs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Refs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Refs(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RefsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RefsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRefs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::clang::clangd::remote::RefsRequest,::clang::clangd::remote::RefsReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Relations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Relations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::clang::clangd::remote::RelationsRequest, ::clang::clangd::remote::RelationsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::clang::clangd::remote::RelationsRequest, ::clang::clangd::remote::RelationsReply>* streamer) {
                       return this->StreamedRelations(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Relations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Relations(::grpc::ServerContext* /*context*/, const ::clang::clangd::remote::RelationsRequest* /*request*/, ::grpc::ServerWriter< ::clang::clangd::remote::RelationsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRelations(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::clang::clangd::remote::RelationsRequest,::clang::clangd::remote::RelationsReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Lookup<WithSplitStreamingMethod_FuzzyFind<WithSplitStreamingMethod_Refs<WithSplitStreamingMethod_Relations<Service > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Lookup<WithSplitStreamingMethod_FuzzyFind<WithSplitStreamingMethod_Refs<WithSplitStreamingMethod_Relations<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace remote
}  // namespace clangd
}  // namespace clang


#endif  // GRPC_Service_2eproto__INCLUDED
