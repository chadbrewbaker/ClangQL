// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Index_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Index_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Index_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Index_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Index_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Index_2eproto_metadata_getter(int index);
namespace clang {
namespace clangd {
namespace remote {
class FinalResult;
struct FinalResultDefaultTypeInternal;
extern FinalResultDefaultTypeInternal _FinalResult_default_instance_;
class FuzzyFindReply;
struct FuzzyFindReplyDefaultTypeInternal;
extern FuzzyFindReplyDefaultTypeInternal _FuzzyFindReply_default_instance_;
class FuzzyFindRequest;
struct FuzzyFindRequestDefaultTypeInternal;
extern FuzzyFindRequestDefaultTypeInternal _FuzzyFindRequest_default_instance_;
class HeaderWithReferences;
struct HeaderWithReferencesDefaultTypeInternal;
extern HeaderWithReferencesDefaultTypeInternal _HeaderWithReferences_default_instance_;
class LookupReply;
struct LookupReplyDefaultTypeInternal;
extern LookupReplyDefaultTypeInternal _LookupReply_default_instance_;
class LookupRequest;
struct LookupRequestDefaultTypeInternal;
extern LookupRequestDefaultTypeInternal _LookupRequest_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Ref;
struct RefDefaultTypeInternal;
extern RefDefaultTypeInternal _Ref_default_instance_;
class RefsReply;
struct RefsReplyDefaultTypeInternal;
extern RefsReplyDefaultTypeInternal _RefsReply_default_instance_;
class RefsRequest;
struct RefsRequestDefaultTypeInternal;
extern RefsRequestDefaultTypeInternal _RefsRequest_default_instance_;
class Relation;
struct RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class RelationsReply;
struct RelationsReplyDefaultTypeInternal;
extern RelationsReplyDefaultTypeInternal _RelationsReply_default_instance_;
class RelationsRequest;
struct RelationsRequestDefaultTypeInternal;
extern RelationsRequestDefaultTypeInternal _RelationsRequest_default_instance_;
class Symbol;
struct SymbolDefaultTypeInternal;
extern SymbolDefaultTypeInternal _Symbol_default_instance_;
class SymbolInfo;
struct SymbolInfoDefaultTypeInternal;
extern SymbolInfoDefaultTypeInternal _SymbolInfo_default_instance_;
class SymbolLocation;
struct SymbolLocationDefaultTypeInternal;
extern SymbolLocationDefaultTypeInternal _SymbolLocation_default_instance_;
}  // namespace remote
}  // namespace clangd
}  // namespace clang
PROTOBUF_NAMESPACE_OPEN
template<> ::clang::clangd::remote::FinalResult* Arena::CreateMaybeMessage<::clang::clangd::remote::FinalResult>(Arena*);
template<> ::clang::clangd::remote::FuzzyFindReply* Arena::CreateMaybeMessage<::clang::clangd::remote::FuzzyFindReply>(Arena*);
template<> ::clang::clangd::remote::FuzzyFindRequest* Arena::CreateMaybeMessage<::clang::clangd::remote::FuzzyFindRequest>(Arena*);
template<> ::clang::clangd::remote::HeaderWithReferences* Arena::CreateMaybeMessage<::clang::clangd::remote::HeaderWithReferences>(Arena*);
template<> ::clang::clangd::remote::LookupReply* Arena::CreateMaybeMessage<::clang::clangd::remote::LookupReply>(Arena*);
template<> ::clang::clangd::remote::LookupRequest* Arena::CreateMaybeMessage<::clang::clangd::remote::LookupRequest>(Arena*);
template<> ::clang::clangd::remote::Position* Arena::CreateMaybeMessage<::clang::clangd::remote::Position>(Arena*);
template<> ::clang::clangd::remote::Ref* Arena::CreateMaybeMessage<::clang::clangd::remote::Ref>(Arena*);
template<> ::clang::clangd::remote::RefsReply* Arena::CreateMaybeMessage<::clang::clangd::remote::RefsReply>(Arena*);
template<> ::clang::clangd::remote::RefsRequest* Arena::CreateMaybeMessage<::clang::clangd::remote::RefsRequest>(Arena*);
template<> ::clang::clangd::remote::Relation* Arena::CreateMaybeMessage<::clang::clangd::remote::Relation>(Arena*);
template<> ::clang::clangd::remote::RelationsReply* Arena::CreateMaybeMessage<::clang::clangd::remote::RelationsReply>(Arena*);
template<> ::clang::clangd::remote::RelationsRequest* Arena::CreateMaybeMessage<::clang::clangd::remote::RelationsRequest>(Arena*);
template<> ::clang::clangd::remote::Symbol* Arena::CreateMaybeMessage<::clang::clangd::remote::Symbol>(Arena*);
template<> ::clang::clangd::remote::SymbolInfo* Arena::CreateMaybeMessage<::clang::clangd::remote::SymbolInfo>(Arena*);
template<> ::clang::clangd::remote::SymbolLocation* Arena::CreateMaybeMessage<::clang::clangd::remote::SymbolLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clang {
namespace clangd {
namespace remote {

// ===================================================================

class FinalResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.FinalResult) */ {
 public:
  inline FinalResult() : FinalResult(nullptr) {}
  virtual ~FinalResult();
  explicit constexpr FinalResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalResult(const FinalResult& from);
  FinalResult(FinalResult&& from) noexcept
    : FinalResult() {
    *this = ::std::move(from);
  }

  inline FinalResult& operator=(const FinalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalResult& operator=(FinalResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinalResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalResult* internal_default_instance() {
    return reinterpret_cast<const FinalResult*>(
               &_FinalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FinalResult& a, FinalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalResult* New() const final {
    return CreateMaybeMessage<FinalResult>(nullptr);
  }

  FinalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinalResult& from);
  void MergeFrom(const FinalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.FinalResult";
  }
  protected:
  explicit FinalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasMoreFieldNumber = 1,
  };
  // optional bool has_more = 1;
  bool has_has_more() const;
  private:
  bool _internal_has_has_more() const;
  public:
  void clear_has_more();
  bool has_more() const;
  void set_has_more(bool value);
  private:
  bool _internal_has_more() const;
  void _internal_set_has_more(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.FinalResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool has_more_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class LookupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.LookupRequest) */ {
 public:
  inline LookupRequest() : LookupRequest(nullptr) {}
  virtual ~LookupRequest();
  explicit constexpr LookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupRequest(const LookupRequest& from);
  LookupRequest(LookupRequest&& from) noexcept
    : LookupRequest() {
    *this = ::std::move(from);
  }

  inline LookupRequest& operator=(const LookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupRequest& operator=(LookupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LookupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupRequest* internal_default_instance() {
    return reinterpret_cast<const LookupRequest*>(
               &_LookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LookupRequest& a, LookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupRequest* New() const final {
    return CreateMaybeMessage<LookupRequest>(nullptr);
  }

  LookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LookupRequest& from);
  void MergeFrom(const LookupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.LookupRequest";
  }
  protected:
  explicit LookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.LookupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class LookupReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.LookupReply) */ {
 public:
  inline LookupReply() : LookupReply(nullptr) {}
  virtual ~LookupReply();
  explicit constexpr LookupReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupReply(const LookupReply& from);
  LookupReply(LookupReply&& from) noexcept
    : LookupReply() {
    *this = ::std::move(from);
  }

  inline LookupReply& operator=(const LookupReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupReply& operator=(LookupReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LookupReply& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kStreamResult = 1,
    kFinalResult = 2,
    KIND_NOT_SET = 0,
  };

  static inline const LookupReply* internal_default_instance() {
    return reinterpret_cast<const LookupReply*>(
               &_LookupReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LookupReply& a, LookupReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupReply* New() const final {
    return CreateMaybeMessage<LookupReply>(nullptr);
  }

  LookupReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LookupReply& from);
  void MergeFrom(const LookupReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.LookupReply";
  }
  protected:
  explicit LookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamResultFieldNumber = 1,
    kFinalResultFieldNumber = 2,
  };
  // .clang.clangd.remote.Symbol stream_result = 1;
  bool has_stream_result() const;
  private:
  bool _internal_has_stream_result() const;
  public:
  void clear_stream_result();
  const ::clang::clangd::remote::Symbol& stream_result() const;
  ::clang::clangd::remote::Symbol* release_stream_result();
  ::clang::clangd::remote::Symbol* mutable_stream_result();
  void set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result);
  private:
  const ::clang::clangd::remote::Symbol& _internal_stream_result() const;
  ::clang::clangd::remote::Symbol* _internal_mutable_stream_result();
  public:
  void unsafe_arena_set_allocated_stream_result(
      ::clang::clangd::remote::Symbol* stream_result);
  ::clang::clangd::remote::Symbol* unsafe_arena_release_stream_result();

  // .clang.clangd.remote.FinalResult final_result = 2;
  bool has_final_result() const;
  private:
  bool _internal_has_final_result() const;
  public:
  void clear_final_result();
  const ::clang::clangd::remote::FinalResult& final_result() const;
  ::clang::clangd::remote::FinalResult* release_final_result();
  ::clang::clangd::remote::FinalResult* mutable_final_result();
  void set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result);
  private:
  const ::clang::clangd::remote::FinalResult& _internal_final_result() const;
  ::clang::clangd::remote::FinalResult* _internal_mutable_final_result();
  public:
  void unsafe_arena_set_allocated_final_result(
      ::clang::clangd::remote::FinalResult* final_result);
  ::clang::clangd::remote::FinalResult* unsafe_arena_release_final_result();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:clang.clangd.remote.LookupReply)
 private:
  class _Internal;
  void set_has_stream_result();
  void set_has_final_result();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::clang::clangd::remote::Symbol* stream_result_;
    ::clang::clangd::remote::FinalResult* final_result_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class FuzzyFindRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.FuzzyFindRequest) */ {
 public:
  inline FuzzyFindRequest() : FuzzyFindRequest(nullptr) {}
  virtual ~FuzzyFindRequest();
  explicit constexpr FuzzyFindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuzzyFindRequest(const FuzzyFindRequest& from);
  FuzzyFindRequest(FuzzyFindRequest&& from) noexcept
    : FuzzyFindRequest() {
    *this = ::std::move(from);
  }

  inline FuzzyFindRequest& operator=(const FuzzyFindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuzzyFindRequest& operator=(FuzzyFindRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuzzyFindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuzzyFindRequest* internal_default_instance() {
    return reinterpret_cast<const FuzzyFindRequest*>(
               &_FuzzyFindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FuzzyFindRequest& a, FuzzyFindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FuzzyFindRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuzzyFindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuzzyFindRequest* New() const final {
    return CreateMaybeMessage<FuzzyFindRequest>(nullptr);
  }

  FuzzyFindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuzzyFindRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuzzyFindRequest& from);
  void MergeFrom(const FuzzyFindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuzzyFindRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.FuzzyFindRequest";
  }
  protected:
  explicit FuzzyFindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 2,
    kProximityPathsFieldNumber = 6,
    kPreferredTypesFieldNumber = 7,
    kQueryFieldNumber = 1,
    kLimitFieldNumber = 4,
    kAnyScopeFieldNumber = 3,
    kRestrictedForCodeCompletionFieldNumber = 5,
  };
  // repeated string scopes = 2;
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // repeated string proximity_paths = 6;
  int proximity_paths_size() const;
  private:
  int _internal_proximity_paths_size() const;
  public:
  void clear_proximity_paths();
  const std::string& proximity_paths(int index) const;
  std::string* mutable_proximity_paths(int index);
  void set_proximity_paths(int index, const std::string& value);
  void set_proximity_paths(int index, std::string&& value);
  void set_proximity_paths(int index, const char* value);
  void set_proximity_paths(int index, const char* value, size_t size);
  std::string* add_proximity_paths();
  void add_proximity_paths(const std::string& value);
  void add_proximity_paths(std::string&& value);
  void add_proximity_paths(const char* value);
  void add_proximity_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proximity_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proximity_paths();
  private:
  const std::string& _internal_proximity_paths(int index) const;
  std::string* _internal_add_proximity_paths();
  public:

  // repeated string preferred_types = 7;
  int preferred_types_size() const;
  private:
  int _internal_preferred_types_size() const;
  public:
  void clear_preferred_types();
  const std::string& preferred_types(int index) const;
  std::string* mutable_preferred_types(int index);
  void set_preferred_types(int index, const std::string& value);
  void set_preferred_types(int index, std::string&& value);
  void set_preferred_types(int index, const char* value);
  void set_preferred_types(int index, const char* value, size_t size);
  std::string* add_preferred_types();
  void add_preferred_types(const std::string& value);
  void add_preferred_types(std::string&& value);
  void add_preferred_types(const char* value);
  void add_preferred_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& preferred_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_preferred_types();
  private:
  const std::string& _internal_preferred_types(int index) const;
  std::string* _internal_add_preferred_types();
  public:

  // optional string query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional uint32 limit = 4;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool any_scope = 3;
  bool has_any_scope() const;
  private:
  bool _internal_has_any_scope() const;
  public:
  void clear_any_scope();
  bool any_scope() const;
  void set_any_scope(bool value);
  private:
  bool _internal_any_scope() const;
  void _internal_set_any_scope(bool value);
  public:

  // optional bool restricted_for_code_completion = 5;
  bool has_restricted_for_code_completion() const;
  private:
  bool _internal_has_restricted_for_code_completion() const;
  public:
  void clear_restricted_for_code_completion();
  bool restricted_for_code_completion() const;
  void set_restricted_for_code_completion(bool value);
  private:
  bool _internal_restricted_for_code_completion() const;
  void _internal_set_restricted_for_code_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.FuzzyFindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proximity_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> preferred_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  bool any_scope_;
  bool restricted_for_code_completion_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class FuzzyFindReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.FuzzyFindReply) */ {
 public:
  inline FuzzyFindReply() : FuzzyFindReply(nullptr) {}
  virtual ~FuzzyFindReply();
  explicit constexpr FuzzyFindReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuzzyFindReply(const FuzzyFindReply& from);
  FuzzyFindReply(FuzzyFindReply&& from) noexcept
    : FuzzyFindReply() {
    *this = ::std::move(from);
  }

  inline FuzzyFindReply& operator=(const FuzzyFindReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuzzyFindReply& operator=(FuzzyFindReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FuzzyFindReply& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kStreamResult = 1,
    kFinalResult = 2,
    KIND_NOT_SET = 0,
  };

  static inline const FuzzyFindReply* internal_default_instance() {
    return reinterpret_cast<const FuzzyFindReply*>(
               &_FuzzyFindReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FuzzyFindReply& a, FuzzyFindReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FuzzyFindReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuzzyFindReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuzzyFindReply* New() const final {
    return CreateMaybeMessage<FuzzyFindReply>(nullptr);
  }

  FuzzyFindReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuzzyFindReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuzzyFindReply& from);
  void MergeFrom(const FuzzyFindReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuzzyFindReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.FuzzyFindReply";
  }
  protected:
  explicit FuzzyFindReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamResultFieldNumber = 1,
    kFinalResultFieldNumber = 2,
  };
  // .clang.clangd.remote.Symbol stream_result = 1;
  bool has_stream_result() const;
  private:
  bool _internal_has_stream_result() const;
  public:
  void clear_stream_result();
  const ::clang::clangd::remote::Symbol& stream_result() const;
  ::clang::clangd::remote::Symbol* release_stream_result();
  ::clang::clangd::remote::Symbol* mutable_stream_result();
  void set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result);
  private:
  const ::clang::clangd::remote::Symbol& _internal_stream_result() const;
  ::clang::clangd::remote::Symbol* _internal_mutable_stream_result();
  public:
  void unsafe_arena_set_allocated_stream_result(
      ::clang::clangd::remote::Symbol* stream_result);
  ::clang::clangd::remote::Symbol* unsafe_arena_release_stream_result();

  // .clang.clangd.remote.FinalResult final_result = 2;
  bool has_final_result() const;
  private:
  bool _internal_has_final_result() const;
  public:
  void clear_final_result();
  const ::clang::clangd::remote::FinalResult& final_result() const;
  ::clang::clangd::remote::FinalResult* release_final_result();
  ::clang::clangd::remote::FinalResult* mutable_final_result();
  void set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result);
  private:
  const ::clang::clangd::remote::FinalResult& _internal_final_result() const;
  ::clang::clangd::remote::FinalResult* _internal_mutable_final_result();
  public:
  void unsafe_arena_set_allocated_final_result(
      ::clang::clangd::remote::FinalResult* final_result);
  ::clang::clangd::remote::FinalResult* unsafe_arena_release_final_result();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:clang.clangd.remote.FuzzyFindReply)
 private:
  class _Internal;
  void set_has_stream_result();
  void set_has_final_result();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::clang::clangd::remote::Symbol* stream_result_;
    ::clang::clangd::remote::FinalResult* final_result_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class RefsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.RefsRequest) */ {
 public:
  inline RefsRequest() : RefsRequest(nullptr) {}
  virtual ~RefsRequest();
  explicit constexpr RefsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefsRequest(const RefsRequest& from);
  RefsRequest(RefsRequest&& from) noexcept
    : RefsRequest() {
    *this = ::std::move(from);
  }

  inline RefsRequest& operator=(const RefsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefsRequest& operator=(RefsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefsRequest* internal_default_instance() {
    return reinterpret_cast<const RefsRequest*>(
               &_RefsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RefsRequest& a, RefsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RefsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefsRequest* New() const final {
    return CreateMaybeMessage<RefsRequest>(nullptr);
  }

  RefsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefsRequest& from);
  void MergeFrom(const RefsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.RefsRequest";
  }
  protected:
  explicit RefsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kFilterFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // optional uint32 filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter() const;
  void set_filter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter() const;
  void _internal_set_filter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.RefsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class RefsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.RefsReply) */ {
 public:
  inline RefsReply() : RefsReply(nullptr) {}
  virtual ~RefsReply();
  explicit constexpr RefsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RefsReply(const RefsReply& from);
  RefsReply(RefsReply&& from) noexcept
    : RefsReply() {
    *this = ::std::move(from);
  }

  inline RefsReply& operator=(const RefsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefsReply& operator=(RefsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefsReply& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kStreamResult = 1,
    kFinalResult = 2,
    KIND_NOT_SET = 0,
  };

  static inline const RefsReply* internal_default_instance() {
    return reinterpret_cast<const RefsReply*>(
               &_RefsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RefsReply& a, RefsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RefsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefsReply* New() const final {
    return CreateMaybeMessage<RefsReply>(nullptr);
  }

  RefsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefsReply& from);
  void MergeFrom(const RefsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.RefsReply";
  }
  protected:
  explicit RefsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamResultFieldNumber = 1,
    kFinalResultFieldNumber = 2,
  };
  // .clang.clangd.remote.Ref stream_result = 1;
  bool has_stream_result() const;
  private:
  bool _internal_has_stream_result() const;
  public:
  void clear_stream_result();
  const ::clang::clangd::remote::Ref& stream_result() const;
  ::clang::clangd::remote::Ref* release_stream_result();
  ::clang::clangd::remote::Ref* mutable_stream_result();
  void set_allocated_stream_result(::clang::clangd::remote::Ref* stream_result);
  private:
  const ::clang::clangd::remote::Ref& _internal_stream_result() const;
  ::clang::clangd::remote::Ref* _internal_mutable_stream_result();
  public:
  void unsafe_arena_set_allocated_stream_result(
      ::clang::clangd::remote::Ref* stream_result);
  ::clang::clangd::remote::Ref* unsafe_arena_release_stream_result();

  // .clang.clangd.remote.FinalResult final_result = 2;
  bool has_final_result() const;
  private:
  bool _internal_has_final_result() const;
  public:
  void clear_final_result();
  const ::clang::clangd::remote::FinalResult& final_result() const;
  ::clang::clangd::remote::FinalResult* release_final_result();
  ::clang::clangd::remote::FinalResult* mutable_final_result();
  void set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result);
  private:
  const ::clang::clangd::remote::FinalResult& _internal_final_result() const;
  ::clang::clangd::remote::FinalResult* _internal_mutable_final_result();
  public:
  void unsafe_arena_set_allocated_final_result(
      ::clang::clangd::remote::FinalResult* final_result);
  ::clang::clangd::remote::FinalResult* unsafe_arena_release_final_result();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:clang.clangd.remote.RefsReply)
 private:
  class _Internal;
  void set_has_stream_result();
  void set_has_final_result();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::clang::clangd::remote::Ref* stream_result_;
    ::clang::clangd::remote::FinalResult* final_result_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class Symbol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.Symbol) */ {
 public:
  inline Symbol() : Symbol(nullptr) {}
  virtual ~Symbol();
  explicit constexpr Symbol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Symbol(const Symbol& from);
  Symbol(Symbol&& from) noexcept
    : Symbol() {
    *this = ::std::move(from);
  }

  inline Symbol& operator=(const Symbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Symbol& operator=(Symbol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Symbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Symbol* internal_default_instance() {
    return reinterpret_cast<const Symbol*>(
               &_Symbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Symbol& a, Symbol& b) {
    a.Swap(&b);
  }
  inline void Swap(Symbol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Symbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Symbol* New() const final {
    return CreateMaybeMessage<Symbol>(nullptr);
  }

  Symbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Symbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Symbol& from);
  void MergeFrom(const Symbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Symbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.Symbol";
  }
  protected:
  explicit Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 15,
    kIdFieldNumber = 1,
    kNameFieldNumber = 3,
    kScopeFieldNumber = 5,
    kSignatureFieldNumber = 9,
    kTemplateSpecializationArgsFieldNumber = 10,
    kCompletionSnippetSuffixFieldNumber = 11,
    kDocumentationFieldNumber = 12,
    kReturnTypeFieldNumber = 13,
    kTypeFieldNumber = 14,
    kInfoFieldNumber = 2,
    kDefinitionFieldNumber = 4,
    kCanonicalDeclarationFieldNumber = 6,
    kReferencesFieldNumber = 7,
    kOriginFieldNumber = 8,
    kFlagsFieldNumber = 16,
  };
  // repeated .clang.clangd.remote.HeaderWithReferences headers = 15;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::clang::clangd::remote::HeaderWithReferences* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clang::clangd::remote::HeaderWithReferences >*
      mutable_headers();
  private:
  const ::clang::clangd::remote::HeaderWithReferences& _internal_headers(int index) const;
  ::clang::clangd::remote::HeaderWithReferences* _internal_add_headers();
  public:
  const ::clang::clangd::remote::HeaderWithReferences& headers(int index) const;
  ::clang::clangd::remote::HeaderWithReferences* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clang::clangd::remote::HeaderWithReferences >&
      headers() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string scope = 5;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // optional string signature = 9;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional string template_specialization_args = 10;
  bool has_template_specialization_args() const;
  private:
  bool _internal_has_template_specialization_args() const;
  public:
  void clear_template_specialization_args();
  const std::string& template_specialization_args() const;
  void set_template_specialization_args(const std::string& value);
  void set_template_specialization_args(std::string&& value);
  void set_template_specialization_args(const char* value);
  void set_template_specialization_args(const char* value, size_t size);
  std::string* mutable_template_specialization_args();
  std::string* release_template_specialization_args();
  void set_allocated_template_specialization_args(std::string* template_specialization_args);
  private:
  const std::string& _internal_template_specialization_args() const;
  void _internal_set_template_specialization_args(const std::string& value);
  std::string* _internal_mutable_template_specialization_args();
  public:

  // optional string completion_snippet_suffix = 11;
  bool has_completion_snippet_suffix() const;
  private:
  bool _internal_has_completion_snippet_suffix() const;
  public:
  void clear_completion_snippet_suffix();
  const std::string& completion_snippet_suffix() const;
  void set_completion_snippet_suffix(const std::string& value);
  void set_completion_snippet_suffix(std::string&& value);
  void set_completion_snippet_suffix(const char* value);
  void set_completion_snippet_suffix(const char* value, size_t size);
  std::string* mutable_completion_snippet_suffix();
  std::string* release_completion_snippet_suffix();
  void set_allocated_completion_snippet_suffix(std::string* completion_snippet_suffix);
  private:
  const std::string& _internal_completion_snippet_suffix() const;
  void _internal_set_completion_snippet_suffix(const std::string& value);
  std::string* _internal_mutable_completion_snippet_suffix();
  public:

  // optional string documentation = 12;
  bool has_documentation() const;
  private:
  bool _internal_has_documentation() const;
  public:
  void clear_documentation();
  const std::string& documentation() const;
  void set_documentation(const std::string& value);
  void set_documentation(std::string&& value);
  void set_documentation(const char* value);
  void set_documentation(const char* value, size_t size);
  std::string* mutable_documentation();
  std::string* release_documentation();
  void set_allocated_documentation(std::string* documentation);
  private:
  const std::string& _internal_documentation() const;
  void _internal_set_documentation(const std::string& value);
  std::string* _internal_mutable_documentation();
  public:

  // optional string return_type = 13;
  bool has_return_type() const;
  private:
  bool _internal_has_return_type() const;
  public:
  void clear_return_type();
  const std::string& return_type() const;
  void set_return_type(const std::string& value);
  void set_return_type(std::string&& value);
  void set_return_type(const char* value);
  void set_return_type(const char* value, size_t size);
  std::string* mutable_return_type();
  std::string* release_return_type();
  void set_allocated_return_type(std::string* return_type);
  private:
  const std::string& _internal_return_type() const;
  void _internal_set_return_type(const std::string& value);
  std::string* _internal_mutable_return_type();
  public:

  // optional string type = 14;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional .clang.clangd.remote.SymbolInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::clang::clangd::remote::SymbolInfo& info() const;
  ::clang::clangd::remote::SymbolInfo* release_info();
  ::clang::clangd::remote::SymbolInfo* mutable_info();
  void set_allocated_info(::clang::clangd::remote::SymbolInfo* info);
  private:
  const ::clang::clangd::remote::SymbolInfo& _internal_info() const;
  ::clang::clangd::remote::SymbolInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::clang::clangd::remote::SymbolInfo* info);
  ::clang::clangd::remote::SymbolInfo* unsafe_arena_release_info();

  // optional .clang.clangd.remote.SymbolLocation definition = 4;
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;
  public:
  void clear_definition();
  const ::clang::clangd::remote::SymbolLocation& definition() const;
  ::clang::clangd::remote::SymbolLocation* release_definition();
  ::clang::clangd::remote::SymbolLocation* mutable_definition();
  void set_allocated_definition(::clang::clangd::remote::SymbolLocation* definition);
  private:
  const ::clang::clangd::remote::SymbolLocation& _internal_definition() const;
  ::clang::clangd::remote::SymbolLocation* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::clang::clangd::remote::SymbolLocation* definition);
  ::clang::clangd::remote::SymbolLocation* unsafe_arena_release_definition();

  // optional .clang.clangd.remote.SymbolLocation canonical_declaration = 6;
  bool has_canonical_declaration() const;
  private:
  bool _internal_has_canonical_declaration() const;
  public:
  void clear_canonical_declaration();
  const ::clang::clangd::remote::SymbolLocation& canonical_declaration() const;
  ::clang::clangd::remote::SymbolLocation* release_canonical_declaration();
  ::clang::clangd::remote::SymbolLocation* mutable_canonical_declaration();
  void set_allocated_canonical_declaration(::clang::clangd::remote::SymbolLocation* canonical_declaration);
  private:
  const ::clang::clangd::remote::SymbolLocation& _internal_canonical_declaration() const;
  ::clang::clangd::remote::SymbolLocation* _internal_mutable_canonical_declaration();
  public:
  void unsafe_arena_set_allocated_canonical_declaration(
      ::clang::clangd::remote::SymbolLocation* canonical_declaration);
  ::clang::clangd::remote::SymbolLocation* unsafe_arena_release_canonical_declaration();

  // optional int32 references = 7;
  bool has_references() const;
  private:
  bool _internal_has_references() const;
  public:
  void clear_references();
  ::PROTOBUF_NAMESPACE_ID::int32 references() const;
  void set_references(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_references() const;
  void _internal_set_references(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 origin = 8;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 16;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.Symbol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clang::clangd::remote::HeaderWithReferences > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_specialization_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr completion_snippet_suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::clang::clangd::remote::SymbolInfo* info_;
  ::clang::clangd::remote::SymbolLocation* definition_;
  ::clang::clangd::remote::SymbolLocation* canonical_declaration_;
  ::PROTOBUF_NAMESPACE_ID::int32 references_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class Ref PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.Ref) */ {
 public:
  inline Ref() : Ref(nullptr) {}
  virtual ~Ref();
  explicit constexpr Ref(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ref(const Ref& from);
  Ref(Ref&& from) noexcept
    : Ref() {
    *this = ::std::move(from);
  }

  inline Ref& operator=(const Ref& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ref& operator=(Ref&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ref& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ref* internal_default_instance() {
    return reinterpret_cast<const Ref*>(
               &_Ref_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Ref& a, Ref& b) {
    a.Swap(&b);
  }
  inline void Swap(Ref* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ref* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ref* New() const final {
    return CreateMaybeMessage<Ref>(nullptr);
  }

  Ref* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ref>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ref& from);
  void MergeFrom(const Ref& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ref* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.Ref";
  }
  protected:
  explicit Ref(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kKindFieldNumber = 2,
  };
  // optional .clang.clangd.remote.SymbolLocation location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::clang::clangd::remote::SymbolLocation& location() const;
  ::clang::clangd::remote::SymbolLocation* release_location();
  ::clang::clangd::remote::SymbolLocation* mutable_location();
  void set_allocated_location(::clang::clangd::remote::SymbolLocation* location);
  private:
  const ::clang::clangd::remote::SymbolLocation& _internal_location() const;
  ::clang::clangd::remote::SymbolLocation* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::clang::clangd::remote::SymbolLocation* location);
  ::clang::clangd::remote::SymbolLocation* unsafe_arena_release_location();

  // optional uint32 kind = 2;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.Ref)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::clang::clangd::remote::SymbolLocation* location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kind_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class SymbolInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.SymbolInfo) */ {
 public:
  inline SymbolInfo() : SymbolInfo(nullptr) {}
  virtual ~SymbolInfo();
  explicit constexpr SymbolInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymbolInfo(const SymbolInfo& from);
  SymbolInfo(SymbolInfo&& from) noexcept
    : SymbolInfo() {
    *this = ::std::move(from);
  }

  inline SymbolInfo& operator=(const SymbolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolInfo& operator=(SymbolInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymbolInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolInfo* internal_default_instance() {
    return reinterpret_cast<const SymbolInfo*>(
               &_SymbolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SymbolInfo& a, SymbolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SymbolInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymbolInfo* New() const final {
    return CreateMaybeMessage<SymbolInfo>(nullptr);
  }

  SymbolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymbolInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymbolInfo& from);
  void MergeFrom(const SymbolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.SymbolInfo";
  }
  protected:
  explicit SymbolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKindFieldNumber = 1,
    kSubkindFieldNumber = 2,
    kLanguageFieldNumber = 3,
    kPropertiesFieldNumber = 4,
  };
  // optional uint32 kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 subkind = 2;
  bool has_subkind() const;
  private:
  bool _internal_has_subkind() const;
  public:
  void clear_subkind();
  ::PROTOBUF_NAMESPACE_ID::uint32 subkind() const;
  void set_subkind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subkind() const;
  void _internal_set_subkind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::PROTOBUF_NAMESPACE_ID::uint32 language() const;
  void set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_language() const;
  void _internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 properties = 4;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  ::PROTOBUF_NAMESPACE_ID::uint32 properties() const;
  void set_properties(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_properties() const;
  void _internal_set_properties(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.SymbolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subkind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 language_;
  ::PROTOBUF_NAMESPACE_ID::uint32 properties_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class SymbolLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.SymbolLocation) */ {
 public:
  inline SymbolLocation() : SymbolLocation(nullptr) {}
  virtual ~SymbolLocation();
  explicit constexpr SymbolLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymbolLocation(const SymbolLocation& from);
  SymbolLocation(SymbolLocation&& from) noexcept
    : SymbolLocation() {
    *this = ::std::move(from);
  }

  inline SymbolLocation& operator=(const SymbolLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolLocation& operator=(SymbolLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymbolLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolLocation* internal_default_instance() {
    return reinterpret_cast<const SymbolLocation*>(
               &_SymbolLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SymbolLocation& a, SymbolLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(SymbolLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymbolLocation* New() const final {
    return CreateMaybeMessage<SymbolLocation>(nullptr);
  }

  SymbolLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymbolLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymbolLocation& from);
  void MergeFrom(const SymbolLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.SymbolLocation";
  }
  protected:
  explicit SymbolLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 3,
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional string file_path = 3;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // optional .clang.clangd.remote.Position start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::clang::clangd::remote::Position& start() const;
  ::clang::clangd::remote::Position* release_start();
  ::clang::clangd::remote::Position* mutable_start();
  void set_allocated_start(::clang::clangd::remote::Position* start);
  private:
  const ::clang::clangd::remote::Position& _internal_start() const;
  ::clang::clangd::remote::Position* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::clang::clangd::remote::Position* start);
  ::clang::clangd::remote::Position* unsafe_arena_release_start();

  // optional .clang.clangd.remote.Position end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::clang::clangd::remote::Position& end() const;
  ::clang::clangd::remote::Position* release_end();
  ::clang::clangd::remote::Position* mutable_end();
  void set_allocated_end(::clang::clangd::remote::Position* end);
  private:
  const ::clang::clangd::remote::Position& _internal_end() const;
  ::clang::clangd::remote::Position* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::clang::clangd::remote::Position* end);
  ::clang::clangd::remote::Position* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.SymbolLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::clang::clangd::remote::Position* start_;
  ::clang::clangd::remote::Position* end_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
  };
  // optional uint32 line = 1;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::uint32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column = 2;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class HeaderWithReferences PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.HeaderWithReferences) */ {
 public:
  inline HeaderWithReferences() : HeaderWithReferences(nullptr) {}
  virtual ~HeaderWithReferences();
  explicit constexpr HeaderWithReferences(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderWithReferences(const HeaderWithReferences& from);
  HeaderWithReferences(HeaderWithReferences&& from) noexcept
    : HeaderWithReferences() {
    *this = ::std::move(from);
  }

  inline HeaderWithReferences& operator=(const HeaderWithReferences& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderWithReferences& operator=(HeaderWithReferences&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeaderWithReferences& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderWithReferences* internal_default_instance() {
    return reinterpret_cast<const HeaderWithReferences*>(
               &_HeaderWithReferences_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HeaderWithReferences& a, HeaderWithReferences& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderWithReferences* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderWithReferences* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderWithReferences* New() const final {
    return CreateMaybeMessage<HeaderWithReferences>(nullptr);
  }

  HeaderWithReferences* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderWithReferences>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderWithReferences& from);
  void MergeFrom(const HeaderWithReferences& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderWithReferences* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.HeaderWithReferences";
  }
  protected:
  explicit HeaderWithReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kReferencesFieldNumber = 2,
  };
  // optional string header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // optional uint32 references = 2;
  bool has_references() const;
  private:
  bool _internal_has_references() const;
  public:
  void clear_references();
  ::PROTOBUF_NAMESPACE_ID::uint32 references() const;
  void set_references(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_references() const;
  void _internal_set_references(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.HeaderWithReferences)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 references_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class RelationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.RelationsRequest) */ {
 public:
  inline RelationsRequest() : RelationsRequest(nullptr) {}
  virtual ~RelationsRequest();
  explicit constexpr RelationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelationsRequest(const RelationsRequest& from);
  RelationsRequest(RelationsRequest&& from) noexcept
    : RelationsRequest() {
    *this = ::std::move(from);
  }

  inline RelationsRequest& operator=(const RelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationsRequest& operator=(RelationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelationsRequest* internal_default_instance() {
    return reinterpret_cast<const RelationsRequest*>(
               &_RelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RelationsRequest& a, RelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationsRequest* New() const final {
    return CreateMaybeMessage<RelationsRequest>(nullptr);
  }

  RelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelationsRequest& from);
  void MergeFrom(const RelationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.RelationsRequest";
  }
  protected:
  explicit RelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectsFieldNumber = 1,
    kPredicateFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // repeated string subjects = 1;
  int subjects_size() const;
  private:
  int _internal_subjects_size() const;
  public:
  void clear_subjects();
  const std::string& subjects(int index) const;
  std::string* mutable_subjects(int index);
  void set_subjects(int index, const std::string& value);
  void set_subjects(int index, std::string&& value);
  void set_subjects(int index, const char* value);
  void set_subjects(int index, const char* value, size_t size);
  std::string* add_subjects();
  void add_subjects(const std::string& value);
  void add_subjects(std::string&& value);
  void add_subjects(const char* value);
  void add_subjects(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subjects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subjects();
  private:
  const std::string& _internal_subjects(int index) const;
  std::string* _internal_add_subjects();
  public:

  // optional uint32 predicate = 2;
  bool has_predicate() const;
  private:
  bool _internal_has_predicate() const;
  public:
  void clear_predicate();
  ::PROTOBUF_NAMESPACE_ID::uint32 predicate() const;
  void set_predicate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_predicate() const;
  void _internal_set_predicate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 limit = 3;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.RelationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subjects_;
  ::PROTOBUF_NAMESPACE_ID::uint32 predicate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class RelationsReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.RelationsReply) */ {
 public:
  inline RelationsReply() : RelationsReply(nullptr) {}
  virtual ~RelationsReply();
  explicit constexpr RelationsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelationsReply(const RelationsReply& from);
  RelationsReply(RelationsReply&& from) noexcept
    : RelationsReply() {
    *this = ::std::move(from);
  }

  inline RelationsReply& operator=(const RelationsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationsReply& operator=(RelationsReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelationsReply& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kStreamResult = 1,
    kFinalResult = 2,
    KIND_NOT_SET = 0,
  };

  static inline const RelationsReply* internal_default_instance() {
    return reinterpret_cast<const RelationsReply*>(
               &_RelationsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RelationsReply& a, RelationsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationsReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationsReply* New() const final {
    return CreateMaybeMessage<RelationsReply>(nullptr);
  }

  RelationsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationsReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelationsReply& from);
  void MergeFrom(const RelationsReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationsReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.RelationsReply";
  }
  protected:
  explicit RelationsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamResultFieldNumber = 1,
    kFinalResultFieldNumber = 2,
  };
  // .clang.clangd.remote.Relation stream_result = 1;
  bool has_stream_result() const;
  private:
  bool _internal_has_stream_result() const;
  public:
  void clear_stream_result();
  const ::clang::clangd::remote::Relation& stream_result() const;
  ::clang::clangd::remote::Relation* release_stream_result();
  ::clang::clangd::remote::Relation* mutable_stream_result();
  void set_allocated_stream_result(::clang::clangd::remote::Relation* stream_result);
  private:
  const ::clang::clangd::remote::Relation& _internal_stream_result() const;
  ::clang::clangd::remote::Relation* _internal_mutable_stream_result();
  public:
  void unsafe_arena_set_allocated_stream_result(
      ::clang::clangd::remote::Relation* stream_result);
  ::clang::clangd::remote::Relation* unsafe_arena_release_stream_result();

  // .clang.clangd.remote.FinalResult final_result = 2;
  bool has_final_result() const;
  private:
  bool _internal_has_final_result() const;
  public:
  void clear_final_result();
  const ::clang::clangd::remote::FinalResult& final_result() const;
  ::clang::clangd::remote::FinalResult* release_final_result();
  ::clang::clangd::remote::FinalResult* mutable_final_result();
  void set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result);
  private:
  const ::clang::clangd::remote::FinalResult& _internal_final_result() const;
  ::clang::clangd::remote::FinalResult* _internal_mutable_final_result();
  public:
  void unsafe_arena_set_allocated_final_result(
      ::clang::clangd::remote::FinalResult* final_result);
  ::clang::clangd::remote::FinalResult* unsafe_arena_release_final_result();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:clang.clangd.remote.RelationsReply)
 private:
  class _Internal;
  void set_has_stream_result();
  void set_has_final_result();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::clang::clangd::remote::Relation* stream_result_;
    ::clang::clangd::remote::FinalResult* final_result_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Index_2eproto;
};
// -------------------------------------------------------------------

class Relation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clang.clangd.remote.Relation) */ {
 public:
  inline Relation() : Relation(nullptr) {}
  virtual ~Relation();
  explicit constexpr Relation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Relation(const Relation& from);
  Relation(Relation&& from) noexcept
    : Relation() {
    *this = ::std::move(from);
  }

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Relation& operator=(Relation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Relation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Relation* internal_default_instance() {
    return reinterpret_cast<const Relation*>(
               &_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Relation& a, Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(Relation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Relation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Relation* New() const final {
    return CreateMaybeMessage<Relation>(nullptr);
  }

  Relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clang.clangd.remote.Relation";
  }
  protected:
  explicit Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Index_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectIdFieldNumber = 1,
    kObjectFieldNumber = 2,
  };
  // optional string subject_id = 1;
  bool has_subject_id() const;
  private:
  bool _internal_has_subject_id() const;
  public:
  void clear_subject_id();
  const std::string& subject_id() const;
  void set_subject_id(const std::string& value);
  void set_subject_id(std::string&& value);
  void set_subject_id(const char* value);
  void set_subject_id(const char* value, size_t size);
  std::string* mutable_subject_id();
  std::string* release_subject_id();
  void set_allocated_subject_id(std::string* subject_id);
  private:
  const std::string& _internal_subject_id() const;
  void _internal_set_subject_id(const std::string& value);
  std::string* _internal_mutable_subject_id();
  public:

  // optional .clang.clangd.remote.Symbol object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::clang::clangd::remote::Symbol& object() const;
  ::clang::clangd::remote::Symbol* release_object();
  ::clang::clangd::remote::Symbol* mutable_object();
  void set_allocated_object(::clang::clangd::remote::Symbol* object);
  private:
  const ::clang::clangd::remote::Symbol& _internal_object() const;
  ::clang::clangd::remote::Symbol* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::clang::clangd::remote::Symbol* object);
  ::clang::clangd::remote::Symbol* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:clang.clangd.remote.Relation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_id_;
  ::clang::clangd::remote::Symbol* object_;
  friend struct ::TableStruct_Index_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FinalResult

// optional bool has_more = 1;
inline bool FinalResult::_internal_has_has_more() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FinalResult::has_has_more() const {
  return _internal_has_has_more();
}
inline void FinalResult::clear_has_more() {
  has_more_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FinalResult::_internal_has_more() const {
  return has_more_;
}
inline bool FinalResult::has_more() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FinalResult.has_more)
  return _internal_has_more();
}
inline void FinalResult::_internal_set_has_more(bool value) {
  _has_bits_[0] |= 0x00000001u;
  has_more_ = value;
}
inline void FinalResult::set_has_more(bool value) {
  _internal_set_has_more(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FinalResult.has_more)
}

// -------------------------------------------------------------------

// LookupRequest

// repeated string ids = 1;
inline int LookupRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int LookupRequest::ids_size() const {
  return _internal_ids_size();
}
inline void LookupRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* LookupRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.LookupRequest.ids)
  return _internal_add_ids();
}
inline const std::string& LookupRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& LookupRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.LookupRequest.ids)
  return _internal_ids(index);
}
inline std::string* LookupRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.LookupRequest.ids)
  return ids_.Mutable(index);
}
inline void LookupRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.LookupRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void LookupRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.LookupRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void LookupRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.LookupRequest.ids)
}
inline void LookupRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.LookupRequest.ids)
}
inline std::string* LookupRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void LookupRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.LookupRequest.ids)
}
inline void LookupRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.LookupRequest.ids)
}
inline void LookupRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.LookupRequest.ids)
}
inline void LookupRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.LookupRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupRequest::ids() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.LookupRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.LookupRequest.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// LookupReply

// .clang.clangd.remote.Symbol stream_result = 1;
inline bool LookupReply::_internal_has_stream_result() const {
  return kind_case() == kStreamResult;
}
inline bool LookupReply::has_stream_result() const {
  return _internal_has_stream_result();
}
inline void LookupReply::set_has_stream_result() {
  _oneof_case_[0] = kStreamResult;
}
inline void LookupReply::clear_stream_result() {
  if (_internal_has_stream_result()) {
    if (GetArena() == nullptr) {
      delete kind_.stream_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::Symbol* LookupReply::release_stream_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.LookupReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
      ::clang::clangd::remote::Symbol* temp = kind_.stream_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::Symbol& LookupReply::_internal_stream_result() const {
  return _internal_has_stream_result()
      ? *kind_.stream_result_
      : reinterpret_cast< ::clang::clangd::remote::Symbol&>(::clang::clangd::remote::_Symbol_default_instance_);
}
inline const ::clang::clangd::remote::Symbol& LookupReply::stream_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.LookupReply.stream_result)
  return _internal_stream_result();
}
inline ::clang::clangd::remote::Symbol* LookupReply::unsafe_arena_release_stream_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.LookupReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
    ::clang::clangd::remote::Symbol* temp = kind_.stream_result_;
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LookupReply::unsafe_arena_set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result) {
  clear_kind();
  if (stream_result) {
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.LookupReply.stream_result)
}
inline ::clang::clangd::remote::Symbol* LookupReply::_internal_mutable_stream_result() {
  if (!_internal_has_stream_result()) {
    clear_kind();
    set_has_stream_result();
    kind_.stream_result_ = CreateMaybeMessage< ::clang::clangd::remote::Symbol >(GetArena());
  }
  return kind_.stream_result_;
}
inline ::clang::clangd::remote::Symbol* LookupReply::mutable_stream_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.LookupReply.stream_result)
  return _internal_mutable_stream_result();
}

// .clang.clangd.remote.FinalResult final_result = 2;
inline bool LookupReply::_internal_has_final_result() const {
  return kind_case() == kFinalResult;
}
inline bool LookupReply::has_final_result() const {
  return _internal_has_final_result();
}
inline void LookupReply::set_has_final_result() {
  _oneof_case_[0] = kFinalResult;
}
inline void LookupReply::clear_final_result() {
  if (_internal_has_final_result()) {
    if (GetArena() == nullptr) {
      delete kind_.final_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::FinalResult* LookupReply::release_final_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.LookupReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
      ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::FinalResult& LookupReply::_internal_final_result() const {
  return _internal_has_final_result()
      ? *kind_.final_result_
      : reinterpret_cast< ::clang::clangd::remote::FinalResult&>(::clang::clangd::remote::_FinalResult_default_instance_);
}
inline const ::clang::clangd::remote::FinalResult& LookupReply::final_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.LookupReply.final_result)
  return _internal_final_result();
}
inline ::clang::clangd::remote::FinalResult* LookupReply::unsafe_arena_release_final_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.LookupReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
    ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LookupReply::unsafe_arena_set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  clear_kind();
  if (final_result) {
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.LookupReply.final_result)
}
inline ::clang::clangd::remote::FinalResult* LookupReply::_internal_mutable_final_result() {
  if (!_internal_has_final_result()) {
    clear_kind();
    set_has_final_result();
    kind_.final_result_ = CreateMaybeMessage< ::clang::clangd::remote::FinalResult >(GetArena());
  }
  return kind_.final_result_;
}
inline ::clang::clangd::remote::FinalResult* LookupReply::mutable_final_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.LookupReply.final_result)
  return _internal_mutable_final_result();
}

inline bool LookupReply::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void LookupReply::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline LookupReply::KindCase LookupReply::kind_case() const {
  return LookupReply::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FuzzyFindRequest

// optional string query = 1;
inline bool FuzzyFindRequest::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FuzzyFindRequest::has_query() const {
  return _internal_has_query();
}
inline void FuzzyFindRequest::clear_query() {
  query_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FuzzyFindRequest::query() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.query)
  return _internal_query();
}
inline void FuzzyFindRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.query)
}
inline std::string* FuzzyFindRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindRequest.query)
  return _internal_mutable_query();
}
inline const std::string& FuzzyFindRequest::_internal_query() const {
  return query_.Get();
}
inline void FuzzyFindRequest::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FuzzyFindRequest::set_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.FuzzyFindRequest.query)
}
inline void FuzzyFindRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.FuzzyFindRequest.query)
}
inline void FuzzyFindRequest::set_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.FuzzyFindRequest.query)
}
inline std::string* FuzzyFindRequest::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000001u;
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FuzzyFindRequest::release_query() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.FuzzyFindRequest.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FuzzyFindRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.FuzzyFindRequest.query)
}

// repeated string scopes = 2;
inline int FuzzyFindRequest::_internal_scopes_size() const {
  return scopes_.size();
}
inline int FuzzyFindRequest::scopes_size() const {
  return _internal_scopes_size();
}
inline void FuzzyFindRequest::clear_scopes() {
  scopes_.Clear();
}
inline std::string* FuzzyFindRequest::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.FuzzyFindRequest.scopes)
  return _internal_add_scopes();
}
inline const std::string& FuzzyFindRequest::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& FuzzyFindRequest::scopes(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.scopes)
  return _internal_scopes(index);
}
inline std::string* FuzzyFindRequest::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindRequest.scopes)
  return scopes_.Mutable(index);
}
inline void FuzzyFindRequest::set_scopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.scopes)
  scopes_.Mutable(index)->assign(value);
}
inline void FuzzyFindRequest::set_scopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
inline void FuzzyFindRequest::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline void FuzzyFindRequest::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline std::string* FuzzyFindRequest::_internal_add_scopes() {
  return scopes_.Add();
}
inline void FuzzyFindRequest::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline void FuzzyFindRequest::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline void FuzzyFindRequest::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline void FuzzyFindRequest::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.FuzzyFindRequest.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FuzzyFindRequest::scopes() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.FuzzyFindRequest.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FuzzyFindRequest::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.FuzzyFindRequest.scopes)
  return &scopes_;
}

// optional bool any_scope = 3;
inline bool FuzzyFindRequest::_internal_has_any_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FuzzyFindRequest::has_any_scope() const {
  return _internal_has_any_scope();
}
inline void FuzzyFindRequest::clear_any_scope() {
  any_scope_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FuzzyFindRequest::_internal_any_scope() const {
  return any_scope_;
}
inline bool FuzzyFindRequest::any_scope() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.any_scope)
  return _internal_any_scope();
}
inline void FuzzyFindRequest::_internal_set_any_scope(bool value) {
  _has_bits_[0] |= 0x00000004u;
  any_scope_ = value;
}
inline void FuzzyFindRequest::set_any_scope(bool value) {
  _internal_set_any_scope(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.any_scope)
}

// optional uint32 limit = 4;
inline bool FuzzyFindRequest::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FuzzyFindRequest::has_limit() const {
  return _internal_has_limit();
}
inline void FuzzyFindRequest::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuzzyFindRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FuzzyFindRequest::limit() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.limit)
  return _internal_limit();
}
inline void FuzzyFindRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
}
inline void FuzzyFindRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.limit)
}

// optional bool restricted_for_code_completion = 5;
inline bool FuzzyFindRequest::_internal_has_restricted_for_code_completion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FuzzyFindRequest::has_restricted_for_code_completion() const {
  return _internal_has_restricted_for_code_completion();
}
inline void FuzzyFindRequest::clear_restricted_for_code_completion() {
  restricted_for_code_completion_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FuzzyFindRequest::_internal_restricted_for_code_completion() const {
  return restricted_for_code_completion_;
}
inline bool FuzzyFindRequest::restricted_for_code_completion() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.restricted_for_code_completion)
  return _internal_restricted_for_code_completion();
}
inline void FuzzyFindRequest::_internal_set_restricted_for_code_completion(bool value) {
  _has_bits_[0] |= 0x00000008u;
  restricted_for_code_completion_ = value;
}
inline void FuzzyFindRequest::set_restricted_for_code_completion(bool value) {
  _internal_set_restricted_for_code_completion(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.restricted_for_code_completion)
}

// repeated string proximity_paths = 6;
inline int FuzzyFindRequest::_internal_proximity_paths_size() const {
  return proximity_paths_.size();
}
inline int FuzzyFindRequest::proximity_paths_size() const {
  return _internal_proximity_paths_size();
}
inline void FuzzyFindRequest::clear_proximity_paths() {
  proximity_paths_.Clear();
}
inline std::string* FuzzyFindRequest::add_proximity_paths() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  return _internal_add_proximity_paths();
}
inline const std::string& FuzzyFindRequest::_internal_proximity_paths(int index) const {
  return proximity_paths_.Get(index);
}
inline const std::string& FuzzyFindRequest::proximity_paths(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  return _internal_proximity_paths(index);
}
inline std::string* FuzzyFindRequest::mutable_proximity_paths(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  return proximity_paths_.Mutable(index);
}
inline void FuzzyFindRequest::set_proximity_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  proximity_paths_.Mutable(index)->assign(value);
}
inline void FuzzyFindRequest::set_proximity_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  proximity_paths_.Mutable(index)->assign(std::move(value));
}
inline void FuzzyFindRequest::set_proximity_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proximity_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline void FuzzyFindRequest::set_proximity_paths(int index, const char* value, size_t size) {
  proximity_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline std::string* FuzzyFindRequest::_internal_add_proximity_paths() {
  return proximity_paths_.Add();
}
inline void FuzzyFindRequest::add_proximity_paths(const std::string& value) {
  proximity_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline void FuzzyFindRequest::add_proximity_paths(std::string&& value) {
  proximity_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline void FuzzyFindRequest::add_proximity_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  proximity_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline void FuzzyFindRequest::add_proximity_paths(const char* value, size_t size) {
  proximity_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FuzzyFindRequest::proximity_paths() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  return proximity_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FuzzyFindRequest::mutable_proximity_paths() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.FuzzyFindRequest.proximity_paths)
  return &proximity_paths_;
}

// repeated string preferred_types = 7;
inline int FuzzyFindRequest::_internal_preferred_types_size() const {
  return preferred_types_.size();
}
inline int FuzzyFindRequest::preferred_types_size() const {
  return _internal_preferred_types_size();
}
inline void FuzzyFindRequest::clear_preferred_types() {
  preferred_types_.Clear();
}
inline std::string* FuzzyFindRequest::add_preferred_types() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  return _internal_add_preferred_types();
}
inline const std::string& FuzzyFindRequest::_internal_preferred_types(int index) const {
  return preferred_types_.Get(index);
}
inline const std::string& FuzzyFindRequest::preferred_types(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  return _internal_preferred_types(index);
}
inline std::string* FuzzyFindRequest::mutable_preferred_types(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  return preferred_types_.Mutable(index);
}
inline void FuzzyFindRequest::set_preferred_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  preferred_types_.Mutable(index)->assign(value);
}
inline void FuzzyFindRequest::set_preferred_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  preferred_types_.Mutable(index)->assign(std::move(value));
}
inline void FuzzyFindRequest::set_preferred_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preferred_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline void FuzzyFindRequest::set_preferred_types(int index, const char* value, size_t size) {
  preferred_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline std::string* FuzzyFindRequest::_internal_add_preferred_types() {
  return preferred_types_.Add();
}
inline void FuzzyFindRequest::add_preferred_types(const std::string& value) {
  preferred_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline void FuzzyFindRequest::add_preferred_types(std::string&& value) {
  preferred_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline void FuzzyFindRequest::add_preferred_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preferred_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline void FuzzyFindRequest::add_preferred_types(const char* value, size_t size) {
  preferred_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.FuzzyFindRequest.preferred_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FuzzyFindRequest::preferred_types() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  return preferred_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FuzzyFindRequest::mutable_preferred_types() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.FuzzyFindRequest.preferred_types)
  return &preferred_types_;
}

// -------------------------------------------------------------------

// FuzzyFindReply

// .clang.clangd.remote.Symbol stream_result = 1;
inline bool FuzzyFindReply::_internal_has_stream_result() const {
  return kind_case() == kStreamResult;
}
inline bool FuzzyFindReply::has_stream_result() const {
  return _internal_has_stream_result();
}
inline void FuzzyFindReply::set_has_stream_result() {
  _oneof_case_[0] = kStreamResult;
}
inline void FuzzyFindReply::clear_stream_result() {
  if (_internal_has_stream_result()) {
    if (GetArena() == nullptr) {
      delete kind_.stream_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::Symbol* FuzzyFindReply::release_stream_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.FuzzyFindReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
      ::clang::clangd::remote::Symbol* temp = kind_.stream_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::Symbol& FuzzyFindReply::_internal_stream_result() const {
  return _internal_has_stream_result()
      ? *kind_.stream_result_
      : reinterpret_cast< ::clang::clangd::remote::Symbol&>(::clang::clangd::remote::_Symbol_default_instance_);
}
inline const ::clang::clangd::remote::Symbol& FuzzyFindReply::stream_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindReply.stream_result)
  return _internal_stream_result();
}
inline ::clang::clangd::remote::Symbol* FuzzyFindReply::unsafe_arena_release_stream_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.FuzzyFindReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
    ::clang::clangd::remote::Symbol* temp = kind_.stream_result_;
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FuzzyFindReply::unsafe_arena_set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result) {
  clear_kind();
  if (stream_result) {
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.FuzzyFindReply.stream_result)
}
inline ::clang::clangd::remote::Symbol* FuzzyFindReply::_internal_mutable_stream_result() {
  if (!_internal_has_stream_result()) {
    clear_kind();
    set_has_stream_result();
    kind_.stream_result_ = CreateMaybeMessage< ::clang::clangd::remote::Symbol >(GetArena());
  }
  return kind_.stream_result_;
}
inline ::clang::clangd::remote::Symbol* FuzzyFindReply::mutable_stream_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindReply.stream_result)
  return _internal_mutable_stream_result();
}

// .clang.clangd.remote.FinalResult final_result = 2;
inline bool FuzzyFindReply::_internal_has_final_result() const {
  return kind_case() == kFinalResult;
}
inline bool FuzzyFindReply::has_final_result() const {
  return _internal_has_final_result();
}
inline void FuzzyFindReply::set_has_final_result() {
  _oneof_case_[0] = kFinalResult;
}
inline void FuzzyFindReply::clear_final_result() {
  if (_internal_has_final_result()) {
    if (GetArena() == nullptr) {
      delete kind_.final_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::FinalResult* FuzzyFindReply::release_final_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.FuzzyFindReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
      ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::FinalResult& FuzzyFindReply::_internal_final_result() const {
  return _internal_has_final_result()
      ? *kind_.final_result_
      : reinterpret_cast< ::clang::clangd::remote::FinalResult&>(::clang::clangd::remote::_FinalResult_default_instance_);
}
inline const ::clang::clangd::remote::FinalResult& FuzzyFindReply::final_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.FuzzyFindReply.final_result)
  return _internal_final_result();
}
inline ::clang::clangd::remote::FinalResult* FuzzyFindReply::unsafe_arena_release_final_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.FuzzyFindReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
    ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FuzzyFindReply::unsafe_arena_set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  clear_kind();
  if (final_result) {
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.FuzzyFindReply.final_result)
}
inline ::clang::clangd::remote::FinalResult* FuzzyFindReply::_internal_mutable_final_result() {
  if (!_internal_has_final_result()) {
    clear_kind();
    set_has_final_result();
    kind_.final_result_ = CreateMaybeMessage< ::clang::clangd::remote::FinalResult >(GetArena());
  }
  return kind_.final_result_;
}
inline ::clang::clangd::remote::FinalResult* FuzzyFindReply::mutable_final_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.FuzzyFindReply.final_result)
  return _internal_mutable_final_result();
}

inline bool FuzzyFindReply::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void FuzzyFindReply::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline FuzzyFindReply::KindCase FuzzyFindReply::kind_case() const {
  return FuzzyFindReply::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RefsRequest

// repeated string ids = 1;
inline int RefsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int RefsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void RefsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* RefsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.RefsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& RefsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& RefsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RefsRequest.ids)
  return _internal_ids(index);
}
inline std::string* RefsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RefsRequest.ids)
  return ids_.Mutable(index);
}
inline void RefsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RefsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void RefsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RefsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void RefsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.RefsRequest.ids)
}
inline void RefsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.RefsRequest.ids)
}
inline std::string* RefsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void RefsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.RefsRequest.ids)
}
inline void RefsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.RefsRequest.ids)
}
inline void RefsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.RefsRequest.ids)
}
inline void RefsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.RefsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RefsRequest::ids() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.RefsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RefsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.RefsRequest.ids)
  return &ids_;
}

// optional uint32 filter = 2;
inline bool RefsRequest::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RefsRequest::has_filter() const {
  return _internal_has_filter();
}
inline void RefsRequest::clear_filter() {
  filter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefsRequest::_internal_filter() const {
  return filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefsRequest::filter() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RefsRequest.filter)
  return _internal_filter();
}
inline void RefsRequest::_internal_set_filter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  filter_ = value;
}
inline void RefsRequest::set_filter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RefsRequest.filter)
}

// optional uint32 limit = 3;
inline bool RefsRequest::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RefsRequest::has_limit() const {
  return _internal_has_limit();
}
inline void RefsRequest::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefsRequest::limit() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RefsRequest.limit)
  return _internal_limit();
}
inline void RefsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
}
inline void RefsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RefsRequest.limit)
}

// -------------------------------------------------------------------

// RefsReply

// .clang.clangd.remote.Ref stream_result = 1;
inline bool RefsReply::_internal_has_stream_result() const {
  return kind_case() == kStreamResult;
}
inline bool RefsReply::has_stream_result() const {
  return _internal_has_stream_result();
}
inline void RefsReply::set_has_stream_result() {
  _oneof_case_[0] = kStreamResult;
}
inline void RefsReply::clear_stream_result() {
  if (_internal_has_stream_result()) {
    if (GetArena() == nullptr) {
      delete kind_.stream_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::Ref* RefsReply::release_stream_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.RefsReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
      ::clang::clangd::remote::Ref* temp = kind_.stream_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::Ref& RefsReply::_internal_stream_result() const {
  return _internal_has_stream_result()
      ? *kind_.stream_result_
      : reinterpret_cast< ::clang::clangd::remote::Ref&>(::clang::clangd::remote::_Ref_default_instance_);
}
inline const ::clang::clangd::remote::Ref& RefsReply::stream_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RefsReply.stream_result)
  return _internal_stream_result();
}
inline ::clang::clangd::remote::Ref* RefsReply::unsafe_arena_release_stream_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.RefsReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
    ::clang::clangd::remote::Ref* temp = kind_.stream_result_;
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RefsReply::unsafe_arena_set_allocated_stream_result(::clang::clangd::remote::Ref* stream_result) {
  clear_kind();
  if (stream_result) {
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.RefsReply.stream_result)
}
inline ::clang::clangd::remote::Ref* RefsReply::_internal_mutable_stream_result() {
  if (!_internal_has_stream_result()) {
    clear_kind();
    set_has_stream_result();
    kind_.stream_result_ = CreateMaybeMessage< ::clang::clangd::remote::Ref >(GetArena());
  }
  return kind_.stream_result_;
}
inline ::clang::clangd::remote::Ref* RefsReply::mutable_stream_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RefsReply.stream_result)
  return _internal_mutable_stream_result();
}

// .clang.clangd.remote.FinalResult final_result = 2;
inline bool RefsReply::_internal_has_final_result() const {
  return kind_case() == kFinalResult;
}
inline bool RefsReply::has_final_result() const {
  return _internal_has_final_result();
}
inline void RefsReply::set_has_final_result() {
  _oneof_case_[0] = kFinalResult;
}
inline void RefsReply::clear_final_result() {
  if (_internal_has_final_result()) {
    if (GetArena() == nullptr) {
      delete kind_.final_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::FinalResult* RefsReply::release_final_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.RefsReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
      ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::FinalResult& RefsReply::_internal_final_result() const {
  return _internal_has_final_result()
      ? *kind_.final_result_
      : reinterpret_cast< ::clang::clangd::remote::FinalResult&>(::clang::clangd::remote::_FinalResult_default_instance_);
}
inline const ::clang::clangd::remote::FinalResult& RefsReply::final_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RefsReply.final_result)
  return _internal_final_result();
}
inline ::clang::clangd::remote::FinalResult* RefsReply::unsafe_arena_release_final_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.RefsReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
    ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RefsReply::unsafe_arena_set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  clear_kind();
  if (final_result) {
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.RefsReply.final_result)
}
inline ::clang::clangd::remote::FinalResult* RefsReply::_internal_mutable_final_result() {
  if (!_internal_has_final_result()) {
    clear_kind();
    set_has_final_result();
    kind_.final_result_ = CreateMaybeMessage< ::clang::clangd::remote::FinalResult >(GetArena());
  }
  return kind_.final_result_;
}
inline ::clang::clangd::remote::FinalResult* RefsReply::mutable_final_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RefsReply.final_result)
  return _internal_mutable_final_result();
}

inline bool RefsReply::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void RefsReply::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline RefsReply::KindCase RefsReply::kind_case() const {
  return RefsReply::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Symbol

// optional string id = 1;
inline bool Symbol::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Symbol::has_id() const {
  return _internal_has_id();
}
inline void Symbol::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Symbol::id() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.id)
  return _internal_id();
}
inline void Symbol::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.id)
}
inline std::string* Symbol::mutable_id() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.id)
  return _internal_mutable_id();
}
inline const std::string& Symbol::_internal_id() const {
  return id_.Get();
}
inline void Symbol::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.id)
}
inline void Symbol::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.id)
}
inline void Symbol::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.id)
}
inline std::string* Symbol::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_id() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.id)
}

// optional .clang.clangd.remote.SymbolInfo info = 2;
inline bool Symbol::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool Symbol::has_info() const {
  return _internal_has_info();
}
inline void Symbol::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::clang::clangd::remote::SymbolInfo& Symbol::_internal_info() const {
  const ::clang::clangd::remote::SymbolInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::SymbolInfo&>(
      ::clang::clangd::remote::_SymbolInfo_default_instance_);
}
inline const ::clang::clangd::remote::SymbolInfo& Symbol::info() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.info)
  return _internal_info();
}
inline void Symbol::unsafe_arena_set_allocated_info(
    ::clang::clangd::remote::SymbolInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.Symbol.info)
}
inline ::clang::clangd::remote::SymbolInfo* Symbol::release_info() {
  _has_bits_[0] &= ~0x00000200u;
  ::clang::clangd::remote::SymbolInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::SymbolInfo* Symbol::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.info)
  _has_bits_[0] &= ~0x00000200u;
  ::clang::clangd::remote::SymbolInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::SymbolInfo* Symbol::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000200u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::SymbolInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::clang::clangd::remote::SymbolInfo* Symbol::mutable_info() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.info)
  return _internal_mutable_info();
}
inline void Symbol::set_allocated_info(::clang::clangd::remote::SymbolInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.info)
}

// optional string name = 3;
inline bool Symbol::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Symbol::has_name() const {
  return _internal_has_name();
}
inline void Symbol::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Symbol::name() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.name)
  return _internal_name();
}
inline void Symbol::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.name)
}
inline std::string* Symbol::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.name)
  return _internal_mutable_name();
}
inline const std::string& Symbol::_internal_name() const {
  return name_.Get();
}
inline void Symbol::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.name)
}
inline void Symbol::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.name)
}
inline void Symbol::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.name)
}
inline std::string* Symbol::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_name() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.name)
}

// optional .clang.clangd.remote.SymbolLocation definition = 4;
inline bool Symbol::_internal_has_definition() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || definition_ != nullptr);
  return value;
}
inline bool Symbol::has_definition() const {
  return _internal_has_definition();
}
inline void Symbol::clear_definition() {
  if (definition_ != nullptr) definition_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::clang::clangd::remote::SymbolLocation& Symbol::_internal_definition() const {
  const ::clang::clangd::remote::SymbolLocation* p = definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::SymbolLocation&>(
      ::clang::clangd::remote::_SymbolLocation_default_instance_);
}
inline const ::clang::clangd::remote::SymbolLocation& Symbol::definition() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.definition)
  return _internal_definition();
}
inline void Symbol::unsafe_arena_set_allocated_definition(
    ::clang::clangd::remote::SymbolLocation* definition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(definition_);
  }
  definition_ = definition;
  if (definition) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.Symbol.definition)
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::release_definition() {
  _has_bits_[0] &= ~0x00000400u;
  ::clang::clangd::remote::SymbolLocation* temp = definition_;
  definition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.definition)
  _has_bits_[0] &= ~0x00000400u;
  ::clang::clangd::remote::SymbolLocation* temp = definition_;
  definition_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::_internal_mutable_definition() {
  _has_bits_[0] |= 0x00000400u;
  if (definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::SymbolLocation>(GetArena());
    definition_ = p;
  }
  return definition_;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.definition)
  return _internal_mutable_definition();
}
inline void Symbol::set_allocated_definition(::clang::clangd::remote::SymbolLocation* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete definition_;
  }
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(definition);
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  definition_ = definition;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.definition)
}

// optional string scope = 5;
inline bool Symbol::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Symbol::has_scope() const {
  return _internal_has_scope();
}
inline void Symbol::clear_scope() {
  scope_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Symbol::scope() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.scope)
  return _internal_scope();
}
inline void Symbol::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.scope)
}
inline std::string* Symbol::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.scope)
  return _internal_mutable_scope();
}
inline const std::string& Symbol::_internal_scope() const {
  return scope_.Get();
}
inline void Symbol::_internal_set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_scope(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.scope)
}
inline void Symbol::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.scope)
}
inline void Symbol::set_scope(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.scope)
}
inline std::string* Symbol::_internal_mutable_scope() {
  _has_bits_[0] |= 0x00000004u;
  return scope_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_scope() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.scope)
  if (!_internal_has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return scope_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.scope)
}

// optional .clang.clangd.remote.SymbolLocation canonical_declaration = 6;
inline bool Symbol::_internal_has_canonical_declaration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || canonical_declaration_ != nullptr);
  return value;
}
inline bool Symbol::has_canonical_declaration() const {
  return _internal_has_canonical_declaration();
}
inline void Symbol::clear_canonical_declaration() {
  if (canonical_declaration_ != nullptr) canonical_declaration_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::clang::clangd::remote::SymbolLocation& Symbol::_internal_canonical_declaration() const {
  const ::clang::clangd::remote::SymbolLocation* p = canonical_declaration_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::SymbolLocation&>(
      ::clang::clangd::remote::_SymbolLocation_default_instance_);
}
inline const ::clang::clangd::remote::SymbolLocation& Symbol::canonical_declaration() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.canonical_declaration)
  return _internal_canonical_declaration();
}
inline void Symbol::unsafe_arena_set_allocated_canonical_declaration(
    ::clang::clangd::remote::SymbolLocation* canonical_declaration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(canonical_declaration_);
  }
  canonical_declaration_ = canonical_declaration;
  if (canonical_declaration) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.Symbol.canonical_declaration)
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::release_canonical_declaration() {
  _has_bits_[0] &= ~0x00000800u;
  ::clang::clangd::remote::SymbolLocation* temp = canonical_declaration_;
  canonical_declaration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::unsafe_arena_release_canonical_declaration() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.canonical_declaration)
  _has_bits_[0] &= ~0x00000800u;
  ::clang::clangd::remote::SymbolLocation* temp = canonical_declaration_;
  canonical_declaration_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::_internal_mutable_canonical_declaration() {
  _has_bits_[0] |= 0x00000800u;
  if (canonical_declaration_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::SymbolLocation>(GetArena());
    canonical_declaration_ = p;
  }
  return canonical_declaration_;
}
inline ::clang::clangd::remote::SymbolLocation* Symbol::mutable_canonical_declaration() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.canonical_declaration)
  return _internal_mutable_canonical_declaration();
}
inline void Symbol::set_allocated_canonical_declaration(::clang::clangd::remote::SymbolLocation* canonical_declaration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete canonical_declaration_;
  }
  if (canonical_declaration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(canonical_declaration);
    if (message_arena != submessage_arena) {
      canonical_declaration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, canonical_declaration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  canonical_declaration_ = canonical_declaration;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.canonical_declaration)
}

// optional int32 references = 7;
inline bool Symbol::_internal_has_references() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Symbol::has_references() const {
  return _internal_has_references();
}
inline void Symbol::clear_references() {
  references_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Symbol::_internal_references() const {
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Symbol::references() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.references)
  return _internal_references();
}
inline void Symbol::_internal_set_references(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  references_ = value;
}
inline void Symbol::set_references(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_references(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.references)
}

// optional uint32 origin = 8;
inline bool Symbol::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Symbol::has_origin() const {
  return _internal_has_origin();
}
inline void Symbol::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Symbol::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Symbol::origin() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.origin)
  return _internal_origin();
}
inline void Symbol::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  origin_ = value;
}
inline void Symbol::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.origin)
}

// optional string signature = 9;
inline bool Symbol::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Symbol::has_signature() const {
  return _internal_has_signature();
}
inline void Symbol::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Symbol::signature() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.signature)
  return _internal_signature();
}
inline void Symbol::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.signature)
}
inline std::string* Symbol::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.signature)
  return _internal_mutable_signature();
}
inline const std::string& Symbol::_internal_signature() const {
  return signature_.Get();
}
inline void Symbol::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.signature)
}
inline void Symbol::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.signature)
}
inline void Symbol::set_signature(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.signature)
}
inline std::string* Symbol::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000008u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_signature() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.signature)
}

// optional string template_specialization_args = 10;
inline bool Symbol::_internal_has_template_specialization_args() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Symbol::has_template_specialization_args() const {
  return _internal_has_template_specialization_args();
}
inline void Symbol::clear_template_specialization_args() {
  template_specialization_args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Symbol::template_specialization_args() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.template_specialization_args)
  return _internal_template_specialization_args();
}
inline void Symbol::set_template_specialization_args(const std::string& value) {
  _internal_set_template_specialization_args(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.template_specialization_args)
}
inline std::string* Symbol::mutable_template_specialization_args() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.template_specialization_args)
  return _internal_mutable_template_specialization_args();
}
inline const std::string& Symbol::_internal_template_specialization_args() const {
  return template_specialization_args_.Get();
}
inline void Symbol::_internal_set_template_specialization_args(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  template_specialization_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_template_specialization_args(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  template_specialization_args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.template_specialization_args)
}
inline void Symbol::set_template_specialization_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  template_specialization_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.template_specialization_args)
}
inline void Symbol::set_template_specialization_args(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  template_specialization_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.template_specialization_args)
}
inline std::string* Symbol::_internal_mutable_template_specialization_args() {
  _has_bits_[0] |= 0x00000010u;
  return template_specialization_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_template_specialization_args() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.template_specialization_args)
  if (!_internal_has_template_specialization_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return template_specialization_args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_template_specialization_args(std::string* template_specialization_args) {
  if (template_specialization_args != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  template_specialization_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_specialization_args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.template_specialization_args)
}

// optional string completion_snippet_suffix = 11;
inline bool Symbol::_internal_has_completion_snippet_suffix() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Symbol::has_completion_snippet_suffix() const {
  return _internal_has_completion_snippet_suffix();
}
inline void Symbol::clear_completion_snippet_suffix() {
  completion_snippet_suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Symbol::completion_snippet_suffix() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.completion_snippet_suffix)
  return _internal_completion_snippet_suffix();
}
inline void Symbol::set_completion_snippet_suffix(const std::string& value) {
  _internal_set_completion_snippet_suffix(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.completion_snippet_suffix)
}
inline std::string* Symbol::mutable_completion_snippet_suffix() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.completion_snippet_suffix)
  return _internal_mutable_completion_snippet_suffix();
}
inline const std::string& Symbol::_internal_completion_snippet_suffix() const {
  return completion_snippet_suffix_.Get();
}
inline void Symbol::_internal_set_completion_snippet_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  completion_snippet_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_completion_snippet_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  completion_snippet_suffix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.completion_snippet_suffix)
}
inline void Symbol::set_completion_snippet_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  completion_snippet_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.completion_snippet_suffix)
}
inline void Symbol::set_completion_snippet_suffix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  completion_snippet_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.completion_snippet_suffix)
}
inline std::string* Symbol::_internal_mutable_completion_snippet_suffix() {
  _has_bits_[0] |= 0x00000020u;
  return completion_snippet_suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_completion_snippet_suffix() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.completion_snippet_suffix)
  if (!_internal_has_completion_snippet_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return completion_snippet_suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_completion_snippet_suffix(std::string* completion_snippet_suffix) {
  if (completion_snippet_suffix != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  completion_snippet_suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), completion_snippet_suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.completion_snippet_suffix)
}

// optional string documentation = 12;
inline bool Symbol::_internal_has_documentation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Symbol::has_documentation() const {
  return _internal_has_documentation();
}
inline void Symbol::clear_documentation() {
  documentation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Symbol::documentation() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.documentation)
  return _internal_documentation();
}
inline void Symbol::set_documentation(const std::string& value) {
  _internal_set_documentation(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.documentation)
}
inline std::string* Symbol::mutable_documentation() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.documentation)
  return _internal_mutable_documentation();
}
inline const std::string& Symbol::_internal_documentation() const {
  return documentation_.Get();
}
inline void Symbol::_internal_set_documentation(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_documentation(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  documentation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.documentation)
}
inline void Symbol::set_documentation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.documentation)
}
inline void Symbol::set_documentation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.documentation)
}
inline std::string* Symbol::_internal_mutable_documentation() {
  _has_bits_[0] |= 0x00000040u;
  return documentation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_documentation() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.documentation)
  if (!_internal_has_documentation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return documentation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_documentation(std::string* documentation) {
  if (documentation != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  documentation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documentation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.documentation)
}

// optional string return_type = 13;
inline bool Symbol::_internal_has_return_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Symbol::has_return_type() const {
  return _internal_has_return_type();
}
inline void Symbol::clear_return_type() {
  return_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Symbol::return_type() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.return_type)
  return _internal_return_type();
}
inline void Symbol::set_return_type(const std::string& value) {
  _internal_set_return_type(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.return_type)
}
inline std::string* Symbol::mutable_return_type() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.return_type)
  return _internal_mutable_return_type();
}
inline const std::string& Symbol::_internal_return_type() const {
  return return_type_.Get();
}
inline void Symbol::_internal_set_return_type(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_return_type(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  return_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.return_type)
}
inline void Symbol::set_return_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.return_type)
}
inline void Symbol::set_return_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.return_type)
}
inline std::string* Symbol::_internal_mutable_return_type() {
  _has_bits_[0] |= 0x00000080u;
  return return_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_return_type() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.return_type)
  if (!_internal_has_return_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return return_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_return_type(std::string* return_type) {
  if (return_type != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  return_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), return_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.return_type)
}

// optional string type = 14;
inline bool Symbol::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Symbol::has_type() const {
  return _internal_has_type();
}
inline void Symbol::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Symbol::type() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.type)
  return _internal_type();
}
inline void Symbol::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.type)
}
inline std::string* Symbol::mutable_type() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.type)
  return _internal_mutable_type();
}
inline const std::string& Symbol::_internal_type() const {
  return type_.Get();
}
inline void Symbol::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Symbol::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Symbol.type)
}
inline void Symbol::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Symbol.type)
}
inline void Symbol::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Symbol.type)
}
inline std::string* Symbol::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000100u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Symbol::release_type() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Symbol.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Symbol::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Symbol.type)
}

// repeated .clang.clangd.remote.HeaderWithReferences headers = 15;
inline int Symbol::_internal_headers_size() const {
  return headers_.size();
}
inline int Symbol::headers_size() const {
  return _internal_headers_size();
}
inline void Symbol::clear_headers() {
  headers_.Clear();
}
inline ::clang::clangd::remote::HeaderWithReferences* Symbol::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Symbol.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clang::clangd::remote::HeaderWithReferences >*
Symbol::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.Symbol.headers)
  return &headers_;
}
inline const ::clang::clangd::remote::HeaderWithReferences& Symbol::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::clang::clangd::remote::HeaderWithReferences& Symbol::headers(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.headers)
  return _internal_headers(index);
}
inline ::clang::clangd::remote::HeaderWithReferences* Symbol::_internal_add_headers() {
  return headers_.Add();
}
inline ::clang::clangd::remote::HeaderWithReferences* Symbol::add_headers() {
  // @@protoc_insertion_point(field_add:clang.clangd.remote.Symbol.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clang::clangd::remote::HeaderWithReferences >&
Symbol::headers() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.Symbol.headers)
  return headers_;
}

// optional uint32 flags = 16;
inline bool Symbol::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Symbol::has_flags() const {
  return _internal_has_flags();
}
inline void Symbol::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Symbol::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Symbol::flags() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Symbol.flags)
  return _internal_flags();
}
inline void Symbol::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  flags_ = value;
}
inline void Symbol::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Symbol.flags)
}

// -------------------------------------------------------------------

// Ref

// optional .clang.clangd.remote.SymbolLocation location = 1;
inline bool Ref::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool Ref::has_location() const {
  return _internal_has_location();
}
inline void Ref::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::clang::clangd::remote::SymbolLocation& Ref::_internal_location() const {
  const ::clang::clangd::remote::SymbolLocation* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::SymbolLocation&>(
      ::clang::clangd::remote::_SymbolLocation_default_instance_);
}
inline const ::clang::clangd::remote::SymbolLocation& Ref::location() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Ref.location)
  return _internal_location();
}
inline void Ref::unsafe_arena_set_allocated_location(
    ::clang::clangd::remote::SymbolLocation* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.Ref.location)
}
inline ::clang::clangd::remote::SymbolLocation* Ref::release_location() {
  _has_bits_[0] &= ~0x00000001u;
  ::clang::clangd::remote::SymbolLocation* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Ref::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Ref.location)
  _has_bits_[0] &= ~0x00000001u;
  ::clang::clangd::remote::SymbolLocation* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::SymbolLocation* Ref::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::SymbolLocation>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::clang::clangd::remote::SymbolLocation* Ref::mutable_location() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Ref.location)
  return _internal_mutable_location();
}
inline void Ref::set_allocated_location(::clang::clangd::remote::SymbolLocation* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Ref.location)
}

// optional uint32 kind = 2;
inline bool Ref::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ref::has_kind() const {
  return _internal_has_kind();
}
inline void Ref::clear_kind() {
  kind_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ref::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ref::kind() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Ref.kind)
  return _internal_kind();
}
inline void Ref::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kind_ = value;
}
inline void Ref::set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Ref.kind)
}

// -------------------------------------------------------------------

// SymbolInfo

// optional uint32 kind = 1;
inline bool SymbolInfo::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SymbolInfo::has_kind() const {
  return _internal_has_kind();
}
inline void SymbolInfo::clear_kind() {
  kind_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::kind() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolInfo.kind)
  return _internal_kind();
}
inline void SymbolInfo::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  kind_ = value;
}
inline void SymbolInfo::set_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.SymbolInfo.kind)
}

// optional uint32 subkind = 2;
inline bool SymbolInfo::_internal_has_subkind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SymbolInfo::has_subkind() const {
  return _internal_has_subkind();
}
inline void SymbolInfo::clear_subkind() {
  subkind_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::_internal_subkind() const {
  return subkind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::subkind() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolInfo.subkind)
  return _internal_subkind();
}
inline void SymbolInfo::_internal_set_subkind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  subkind_ = value;
}
inline void SymbolInfo::set_subkind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subkind(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.SymbolInfo.subkind)
}

// optional uint32 language = 3;
inline bool SymbolInfo::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SymbolInfo::has_language() const {
  return _internal_has_language();
}
inline void SymbolInfo::clear_language() {
  language_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::_internal_language() const {
  return language_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::language() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolInfo.language)
  return _internal_language();
}
inline void SymbolInfo::_internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  language_ = value;
}
inline void SymbolInfo::set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.SymbolInfo.language)
}

// optional uint32 properties = 4;
inline bool SymbolInfo::_internal_has_properties() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SymbolInfo::has_properties() const {
  return _internal_has_properties();
}
inline void SymbolInfo::clear_properties() {
  properties_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::_internal_properties() const {
  return properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SymbolInfo::properties() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolInfo.properties)
  return _internal_properties();
}
inline void SymbolInfo::_internal_set_properties(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  properties_ = value;
}
inline void SymbolInfo::set_properties(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_properties(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.SymbolInfo.properties)
}

// -------------------------------------------------------------------

// SymbolLocation

// optional .clang.clangd.remote.Position start = 1;
inline bool SymbolLocation::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool SymbolLocation::has_start() const {
  return _internal_has_start();
}
inline void SymbolLocation::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::clang::clangd::remote::Position& SymbolLocation::_internal_start() const {
  const ::clang::clangd::remote::Position* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::Position&>(
      ::clang::clangd::remote::_Position_default_instance_);
}
inline const ::clang::clangd::remote::Position& SymbolLocation::start() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolLocation.start)
  return _internal_start();
}
inline void SymbolLocation::unsafe_arena_set_allocated_start(
    ::clang::clangd::remote::Position* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.SymbolLocation.start)
}
inline ::clang::clangd::remote::Position* SymbolLocation::release_start() {
  _has_bits_[0] &= ~0x00000002u;
  ::clang::clangd::remote::Position* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::Position* SymbolLocation::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.SymbolLocation.start)
  _has_bits_[0] &= ~0x00000002u;
  ::clang::clangd::remote::Position* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::Position* SymbolLocation::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000002u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::Position>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::clang::clangd::remote::Position* SymbolLocation::mutable_start() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.SymbolLocation.start)
  return _internal_mutable_start();
}
inline void SymbolLocation::set_allocated_start(::clang::clangd::remote::Position* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.SymbolLocation.start)
}

// optional .clang.clangd.remote.Position end = 2;
inline bool SymbolLocation::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool SymbolLocation::has_end() const {
  return _internal_has_end();
}
inline void SymbolLocation::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::clang::clangd::remote::Position& SymbolLocation::_internal_end() const {
  const ::clang::clangd::remote::Position* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::Position&>(
      ::clang::clangd::remote::_Position_default_instance_);
}
inline const ::clang::clangd::remote::Position& SymbolLocation::end() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolLocation.end)
  return _internal_end();
}
inline void SymbolLocation::unsafe_arena_set_allocated_end(
    ::clang::clangd::remote::Position* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.SymbolLocation.end)
}
inline ::clang::clangd::remote::Position* SymbolLocation::release_end() {
  _has_bits_[0] &= ~0x00000004u;
  ::clang::clangd::remote::Position* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::Position* SymbolLocation::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.SymbolLocation.end)
  _has_bits_[0] &= ~0x00000004u;
  ::clang::clangd::remote::Position* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::Position* SymbolLocation::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000004u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::Position>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::clang::clangd::remote::Position* SymbolLocation::mutable_end() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.SymbolLocation.end)
  return _internal_mutable_end();
}
inline void SymbolLocation::set_allocated_end(::clang::clangd::remote::Position* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.SymbolLocation.end)
}

// optional string file_path = 3;
inline bool SymbolLocation::_internal_has_file_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SymbolLocation::has_file_path() const {
  return _internal_has_file_path();
}
inline void SymbolLocation::clear_file_path() {
  file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SymbolLocation::file_path() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.SymbolLocation.file_path)
  return _internal_file_path();
}
inline void SymbolLocation::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.SymbolLocation.file_path)
}
inline std::string* SymbolLocation::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.SymbolLocation.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& SymbolLocation::_internal_file_path() const {
  return file_path_.Get();
}
inline void SymbolLocation::_internal_set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SymbolLocation::set_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.SymbolLocation.file_path)
}
inline void SymbolLocation::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.SymbolLocation.file_path)
}
inline void SymbolLocation::set_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.SymbolLocation.file_path)
}
inline std::string* SymbolLocation::_internal_mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SymbolLocation::release_file_path() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.SymbolLocation.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SymbolLocation::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.SymbolLocation.file_path)
}

// -------------------------------------------------------------------

// Position

// optional uint32 line = 1;
inline bool Position::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_line() const {
  return _internal_has_line();
}
inline void Position::clear_line() {
  line_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::line() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Position.line)
  return _internal_line();
}
inline void Position::_internal_set_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  line_ = value;
}
inline void Position::set_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Position.line)
}

// optional uint32 column = 2;
inline bool Position::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_column() const {
  return _internal_has_column();
}
inline void Position::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::column() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Position.column)
  return _internal_column();
}
inline void Position::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_ = value;
}
inline void Position::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Position.column)
}

// -------------------------------------------------------------------

// HeaderWithReferences

// optional string header = 1;
inline bool HeaderWithReferences::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeaderWithReferences::has_header() const {
  return _internal_has_header();
}
inline void HeaderWithReferences::clear_header() {
  header_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeaderWithReferences::header() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.HeaderWithReferences.header)
  return _internal_header();
}
inline void HeaderWithReferences::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.HeaderWithReferences.header)
}
inline std::string* HeaderWithReferences::mutable_header() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.HeaderWithReferences.header)
  return _internal_mutable_header();
}
inline const std::string& HeaderWithReferences::_internal_header() const {
  return header_.Get();
}
inline void HeaderWithReferences::_internal_set_header(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HeaderWithReferences::set_header(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.HeaderWithReferences.header)
}
inline void HeaderWithReferences::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.HeaderWithReferences.header)
}
inline void HeaderWithReferences::set_header(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.HeaderWithReferences.header)
}
inline std::string* HeaderWithReferences::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HeaderWithReferences::release_header() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.HeaderWithReferences.header)
  if (!_internal_has_header()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderWithReferences::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.HeaderWithReferences.header)
}

// optional uint32 references = 2;
inline bool HeaderWithReferences::_internal_has_references() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeaderWithReferences::has_references() const {
  return _internal_has_references();
}
inline void HeaderWithReferences::clear_references() {
  references_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderWithReferences::_internal_references() const {
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderWithReferences::references() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.HeaderWithReferences.references)
  return _internal_references();
}
inline void HeaderWithReferences::_internal_set_references(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  references_ = value;
}
inline void HeaderWithReferences::set_references(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_references(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.HeaderWithReferences.references)
}

// -------------------------------------------------------------------

// RelationsRequest

// repeated string subjects = 1;
inline int RelationsRequest::_internal_subjects_size() const {
  return subjects_.size();
}
inline int RelationsRequest::subjects_size() const {
  return _internal_subjects_size();
}
inline void RelationsRequest::clear_subjects() {
  subjects_.Clear();
}
inline std::string* RelationsRequest::add_subjects() {
  // @@protoc_insertion_point(field_add_mutable:clang.clangd.remote.RelationsRequest.subjects)
  return _internal_add_subjects();
}
inline const std::string& RelationsRequest::_internal_subjects(int index) const {
  return subjects_.Get(index);
}
inline const std::string& RelationsRequest::subjects(int index) const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RelationsRequest.subjects)
  return _internal_subjects(index);
}
inline std::string* RelationsRequest::mutable_subjects(int index) {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RelationsRequest.subjects)
  return subjects_.Mutable(index);
}
inline void RelationsRequest::set_subjects(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RelationsRequest.subjects)
  subjects_.Mutable(index)->assign(value);
}
inline void RelationsRequest::set_subjects(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RelationsRequest.subjects)
  subjects_.Mutable(index)->assign(std::move(value));
}
inline void RelationsRequest::set_subjects(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subjects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.RelationsRequest.subjects)
}
inline void RelationsRequest::set_subjects(int index, const char* value, size_t size) {
  subjects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.RelationsRequest.subjects)
}
inline std::string* RelationsRequest::_internal_add_subjects() {
  return subjects_.Add();
}
inline void RelationsRequest::add_subjects(const std::string& value) {
  subjects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:clang.clangd.remote.RelationsRequest.subjects)
}
inline void RelationsRequest::add_subjects(std::string&& value) {
  subjects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:clang.clangd.remote.RelationsRequest.subjects)
}
inline void RelationsRequest::add_subjects(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subjects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:clang.clangd.remote.RelationsRequest.subjects)
}
inline void RelationsRequest::add_subjects(const char* value, size_t size) {
  subjects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:clang.clangd.remote.RelationsRequest.subjects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelationsRequest::subjects() const {
  // @@protoc_insertion_point(field_list:clang.clangd.remote.RelationsRequest.subjects)
  return subjects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelationsRequest::mutable_subjects() {
  // @@protoc_insertion_point(field_mutable_list:clang.clangd.remote.RelationsRequest.subjects)
  return &subjects_;
}

// optional uint32 predicate = 2;
inline bool RelationsRequest::_internal_has_predicate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RelationsRequest::has_predicate() const {
  return _internal_has_predicate();
}
inline void RelationsRequest::clear_predicate() {
  predicate_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationsRequest::_internal_predicate() const {
  return predicate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationsRequest::predicate() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RelationsRequest.predicate)
  return _internal_predicate();
}
inline void RelationsRequest::_internal_set_predicate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  predicate_ = value;
}
inline void RelationsRequest::set_predicate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_predicate(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RelationsRequest.predicate)
}

// optional uint32 limit = 3;
inline bool RelationsRequest::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RelationsRequest::has_limit() const {
  return _internal_has_limit();
}
inline void RelationsRequest::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RelationsRequest.limit)
  return _internal_limit();
}
inline void RelationsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  limit_ = value;
}
inline void RelationsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.RelationsRequest.limit)
}

// -------------------------------------------------------------------

// RelationsReply

// .clang.clangd.remote.Relation stream_result = 1;
inline bool RelationsReply::_internal_has_stream_result() const {
  return kind_case() == kStreamResult;
}
inline bool RelationsReply::has_stream_result() const {
  return _internal_has_stream_result();
}
inline void RelationsReply::set_has_stream_result() {
  _oneof_case_[0] = kStreamResult;
}
inline void RelationsReply::clear_stream_result() {
  if (_internal_has_stream_result()) {
    if (GetArena() == nullptr) {
      delete kind_.stream_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::Relation* RelationsReply::release_stream_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.RelationsReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
      ::clang::clangd::remote::Relation* temp = kind_.stream_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::Relation& RelationsReply::_internal_stream_result() const {
  return _internal_has_stream_result()
      ? *kind_.stream_result_
      : reinterpret_cast< ::clang::clangd::remote::Relation&>(::clang::clangd::remote::_Relation_default_instance_);
}
inline const ::clang::clangd::remote::Relation& RelationsReply::stream_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RelationsReply.stream_result)
  return _internal_stream_result();
}
inline ::clang::clangd::remote::Relation* RelationsReply::unsafe_arena_release_stream_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.RelationsReply.stream_result)
  if (_internal_has_stream_result()) {
    clear_has_kind();
    ::clang::clangd::remote::Relation* temp = kind_.stream_result_;
    kind_.stream_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelationsReply::unsafe_arena_set_allocated_stream_result(::clang::clangd::remote::Relation* stream_result) {
  clear_kind();
  if (stream_result) {
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.RelationsReply.stream_result)
}
inline ::clang::clangd::remote::Relation* RelationsReply::_internal_mutable_stream_result() {
  if (!_internal_has_stream_result()) {
    clear_kind();
    set_has_stream_result();
    kind_.stream_result_ = CreateMaybeMessage< ::clang::clangd::remote::Relation >(GetArena());
  }
  return kind_.stream_result_;
}
inline ::clang::clangd::remote::Relation* RelationsReply::mutable_stream_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RelationsReply.stream_result)
  return _internal_mutable_stream_result();
}

// .clang.clangd.remote.FinalResult final_result = 2;
inline bool RelationsReply::_internal_has_final_result() const {
  return kind_case() == kFinalResult;
}
inline bool RelationsReply::has_final_result() const {
  return _internal_has_final_result();
}
inline void RelationsReply::set_has_final_result() {
  _oneof_case_[0] = kFinalResult;
}
inline void RelationsReply::clear_final_result() {
  if (_internal_has_final_result()) {
    if (GetArena() == nullptr) {
      delete kind_.final_result_;
    }
    clear_has_kind();
  }
}
inline ::clang::clangd::remote::FinalResult* RelationsReply::release_final_result() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.RelationsReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
      ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::clang::clangd::remote::FinalResult& RelationsReply::_internal_final_result() const {
  return _internal_has_final_result()
      ? *kind_.final_result_
      : reinterpret_cast< ::clang::clangd::remote::FinalResult&>(::clang::clangd::remote::_FinalResult_default_instance_);
}
inline const ::clang::clangd::remote::FinalResult& RelationsReply::final_result() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.RelationsReply.final_result)
  return _internal_final_result();
}
inline ::clang::clangd::remote::FinalResult* RelationsReply::unsafe_arena_release_final_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:clang.clangd.remote.RelationsReply.final_result)
  if (_internal_has_final_result()) {
    clear_has_kind();
    ::clang::clangd::remote::FinalResult* temp = kind_.final_result_;
    kind_.final_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelationsReply::unsafe_arena_set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  clear_kind();
  if (final_result) {
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.RelationsReply.final_result)
}
inline ::clang::clangd::remote::FinalResult* RelationsReply::_internal_mutable_final_result() {
  if (!_internal_has_final_result()) {
    clear_kind();
    set_has_final_result();
    kind_.final_result_ = CreateMaybeMessage< ::clang::clangd::remote::FinalResult >(GetArena());
  }
  return kind_.final_result_;
}
inline ::clang::clangd::remote::FinalResult* RelationsReply::mutable_final_result() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.RelationsReply.final_result)
  return _internal_mutable_final_result();
}

inline bool RelationsReply::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void RelationsReply::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline RelationsReply::KindCase RelationsReply::kind_case() const {
  return RelationsReply::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Relation

// optional string subject_id = 1;
inline bool Relation::_internal_has_subject_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Relation::has_subject_id() const {
  return _internal_has_subject_id();
}
inline void Relation::clear_subject_id() {
  subject_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Relation::subject_id() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Relation.subject_id)
  return _internal_subject_id();
}
inline void Relation::set_subject_id(const std::string& value) {
  _internal_set_subject_id(value);
  // @@protoc_insertion_point(field_set:clang.clangd.remote.Relation.subject_id)
}
inline std::string* Relation::mutable_subject_id() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Relation.subject_id)
  return _internal_mutable_subject_id();
}
inline const std::string& Relation::_internal_subject_id() const {
  return subject_id_.Get();
}
inline void Relation::_internal_set_subject_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subject_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Relation::set_subject_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subject_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clang.clangd.remote.Relation.subject_id)
}
inline void Relation::set_subject_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subject_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clang.clangd.remote.Relation.subject_id)
}
inline void Relation::set_subject_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subject_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clang.clangd.remote.Relation.subject_id)
}
inline std::string* Relation::_internal_mutable_subject_id() {
  _has_bits_[0] |= 0x00000001u;
  return subject_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Relation::release_subject_id() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Relation.subject_id)
  if (!_internal_has_subject_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subject_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Relation::set_allocated_subject_id(std::string* subject_id) {
  if (subject_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subject_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Relation.subject_id)
}

// optional .clang.clangd.remote.Symbol object = 2;
inline bool Relation::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool Relation::has_object() const {
  return _internal_has_object();
}
inline void Relation::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::clang::clangd::remote::Symbol& Relation::_internal_object() const {
  const ::clang::clangd::remote::Symbol* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::clang::clangd::remote::Symbol&>(
      ::clang::clangd::remote::_Symbol_default_instance_);
}
inline const ::clang::clangd::remote::Symbol& Relation::object() const {
  // @@protoc_insertion_point(field_get:clang.clangd.remote.Relation.object)
  return _internal_object();
}
inline void Relation::unsafe_arena_set_allocated_object(
    ::clang::clangd::remote::Symbol* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:clang.clangd.remote.Relation.object)
}
inline ::clang::clangd::remote::Symbol* Relation::release_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::clang::clangd::remote::Symbol* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::clang::clangd::remote::Symbol* Relation::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:clang.clangd.remote.Relation.object)
  _has_bits_[0] &= ~0x00000002u;
  ::clang::clangd::remote::Symbol* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::clang::clangd::remote::Symbol* Relation::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::clang::clangd::remote::Symbol>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::clang::clangd::remote::Symbol* Relation::mutable_object() {
  // @@protoc_insertion_point(field_mutable:clang.clangd.remote.Relation.object)
  return _internal_mutable_object();
}
inline void Relation::set_allocated_object(::clang::clangd::remote::Symbol* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.Relation.object)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace remote
}  // namespace clangd
}  // namespace clang

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Index_2eproto
