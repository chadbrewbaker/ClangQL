// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Index.proto

#include "Index.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace clang {
namespace clangd {
namespace remote {
constexpr FinalResult::FinalResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_more_(false){}
struct FinalResultDefaultTypeInternal {
  constexpr FinalResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FinalResultDefaultTypeInternal() {}
  union {
    FinalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FinalResultDefaultTypeInternal _FinalResult_default_instance_;
constexpr LookupRequest::LookupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_(){}
struct LookupRequestDefaultTypeInternal {
  constexpr LookupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupRequestDefaultTypeInternal() {}
  union {
    LookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupRequestDefaultTypeInternal _LookupRequest_default_instance_;
constexpr LookupReply::LookupReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LookupReplyDefaultTypeInternal {
  constexpr LookupReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupReplyDefaultTypeInternal() {}
  union {
    LookupReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupReplyDefaultTypeInternal _LookupReply_default_instance_;
constexpr FuzzyFindRequest::FuzzyFindRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , proximity_paths_()
  , preferred_types_()
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(0u)
  , any_scope_(false)
  , restricted_for_code_completion_(false){}
struct FuzzyFindRequestDefaultTypeInternal {
  constexpr FuzzyFindRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FuzzyFindRequestDefaultTypeInternal() {}
  union {
    FuzzyFindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FuzzyFindRequestDefaultTypeInternal _FuzzyFindRequest_default_instance_;
constexpr FuzzyFindReply::FuzzyFindReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct FuzzyFindReplyDefaultTypeInternal {
  constexpr FuzzyFindReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FuzzyFindReplyDefaultTypeInternal() {}
  union {
    FuzzyFindReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FuzzyFindReplyDefaultTypeInternal _FuzzyFindReply_default_instance_;
constexpr RefsRequest::RefsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , filter_(0u)
  , limit_(0u){}
struct RefsRequestDefaultTypeInternal {
  constexpr RefsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefsRequestDefaultTypeInternal() {}
  union {
    RefsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefsRequestDefaultTypeInternal _RefsRequest_default_instance_;
constexpr RefsReply::RefsReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RefsReplyDefaultTypeInternal {
  constexpr RefsReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefsReplyDefaultTypeInternal() {}
  union {
    RefsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefsReplyDefaultTypeInternal _RefsReply_default_instance_;
constexpr Symbol::Symbol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scope_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_specialization_args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , completion_snippet_suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , documentation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , return_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(nullptr)
  , definition_(nullptr)
  , canonical_declaration_(nullptr)
  , references_(0)
  , origin_(0u)
  , flags_(0u){}
struct SymbolDefaultTypeInternal {
  constexpr SymbolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SymbolDefaultTypeInternal() {}
  union {
    Symbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SymbolDefaultTypeInternal _Symbol_default_instance_;
constexpr Ref::Ref(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , kind_(0u){}
struct RefDefaultTypeInternal {
  constexpr RefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RefDefaultTypeInternal() {}
  union {
    Ref _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RefDefaultTypeInternal _Ref_default_instance_;
constexpr SymbolInfo::SymbolInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kind_(0u)
  , subkind_(0u)
  , language_(0u)
  , properties_(0u){}
struct SymbolInfoDefaultTypeInternal {
  constexpr SymbolInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SymbolInfoDefaultTypeInternal() {}
  union {
    SymbolInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SymbolInfoDefaultTypeInternal _SymbolInfo_default_instance_;
constexpr SymbolLocation::SymbolLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(nullptr)
  , end_(nullptr){}
struct SymbolLocationDefaultTypeInternal {
  constexpr SymbolLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SymbolLocationDefaultTypeInternal() {}
  union {
    SymbolLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SymbolLocationDefaultTypeInternal _SymbolLocation_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_(0u)
  , column_(0u){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr HeaderWithReferences::HeaderWithReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , references_(0u){}
struct HeaderWithReferencesDefaultTypeInternal {
  constexpr HeaderWithReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderWithReferencesDefaultTypeInternal() {}
  union {
    HeaderWithReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderWithReferencesDefaultTypeInternal _HeaderWithReferences_default_instance_;
constexpr RelationsRequest::RelationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subjects_()
  , predicate_(0u)
  , limit_(0u){}
struct RelationsRequestDefaultTypeInternal {
  constexpr RelationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationsRequestDefaultTypeInternal() {}
  union {
    RelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationsRequestDefaultTypeInternal _RelationsRequest_default_instance_;
constexpr RelationsReply::RelationsReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RelationsReplyDefaultTypeInternal {
  constexpr RelationsReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationsReplyDefaultTypeInternal() {}
  union {
    RelationsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationsReplyDefaultTypeInternal _RelationsReply_default_instance_;
constexpr Relation::Relation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr){}
struct RelationDefaultTypeInternal {
  constexpr RelationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationDefaultTypeInternal() {}
  union {
    Relation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationDefaultTypeInternal _Relation_default_instance_;
}  // namespace remote
}  // namespace clangd
}  // namespace clang
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Index_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Index_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Index_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Index_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FinalResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FinalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FinalResult, has_more_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::LookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::LookupRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::LookupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::LookupReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::LookupReply, kind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, scopes_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, any_scope_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, restricted_for_code_completion_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, proximity_paths_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindRequest, preferred_types_),
  0,
  ~0u,
  2,
  1,
  3,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::FuzzyFindReply, kind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsRequest, limit_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RefsReply, kind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, id_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, info_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, name_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, definition_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, scope_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, canonical_declaration_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, references_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, origin_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, signature_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, template_specialization_args_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, completion_snippet_suffix_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, documentation_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, return_type_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, type_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, headers_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Symbol, flags_),
  0,
  9,
  1,
  10,
  2,
  11,
  12,
  13,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  14,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Ref, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Ref, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Ref, location_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Ref, kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, kind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, subkind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, language_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolInfo, properties_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolLocation, start_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolLocation, end_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::SymbolLocation, file_path_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Position, line_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Position, column_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::HeaderWithReferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::HeaderWithReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::HeaderWithReferences, header_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::HeaderWithReferences, references_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsRequest, subjects_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsRequest, predicate_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsRequest, limit_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::RelationsReply, kind_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Relation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Relation, subject_id_),
  PROTOBUF_FIELD_OFFSET(::clang::clangd::remote::Relation, object_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::clang::clangd::remote::FinalResult)},
  { 7, -1, sizeof(::clang::clangd::remote::LookupRequest)},
  { 13, -1, sizeof(::clang::clangd::remote::LookupReply)},
  { 21, 33, sizeof(::clang::clangd::remote::FuzzyFindRequest)},
  { 40, -1, sizeof(::clang::clangd::remote::FuzzyFindReply)},
  { 48, 56, sizeof(::clang::clangd::remote::RefsRequest)},
  { 59, -1, sizeof(::clang::clangd::remote::RefsReply)},
  { 67, 88, sizeof(::clang::clangd::remote::Symbol)},
  { 104, 111, sizeof(::clang::clangd::remote::Ref)},
  { 113, 122, sizeof(::clang::clangd::remote::SymbolInfo)},
  { 126, 134, sizeof(::clang::clangd::remote::SymbolLocation)},
  { 137, 144, sizeof(::clang::clangd::remote::Position)},
  { 146, 153, sizeof(::clang::clangd::remote::HeaderWithReferences)},
  { 155, 163, sizeof(::clang::clangd::remote::RelationsRequest)},
  { 166, -1, sizeof(::clang::clangd::remote::RelationsReply)},
  { 174, 181, sizeof(::clang::clangd::remote::Relation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_FinalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_LookupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_LookupReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_FuzzyFindRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_FuzzyFindReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_RefsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_RefsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_Symbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_Ref_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_SymbolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_SymbolLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_HeaderWithReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_RelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_RelationsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clang::clangd::remote::_Relation_default_instance_),
};

const char descriptor_table_protodef_Index_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Index.proto\022\023clang.clangd.remote\"\037\n\013Fi"
  "nalResult\022\020\n\010has_more\030\001 \001(\010\"\034\n\rLookupReq"
  "uest\022\013\n\003ids\030\001 \003(\t\"\205\001\n\013LookupReply\0224\n\rstr"
  "eam_result\030\001 \001(\0132\033.clang.clangd.remote.S"
  "ymbolH\000\0228\n\014final_result\030\002 \001(\0132 .clang.cl"
  "angd.remote.FinalResultH\000B\006\n\004kind\"\255\001\n\020Fu"
  "zzyFindRequest\022\r\n\005query\030\001 \001(\t\022\016\n\006scopes\030"
  "\002 \003(\t\022\021\n\tany_scope\030\003 \001(\010\022\r\n\005limit\030\004 \001(\r\022"
  "&\n\036restricted_for_code_completion\030\005 \001(\010\022"
  "\027\n\017proximity_paths\030\006 \003(\t\022\027\n\017preferred_ty"
  "pes\030\007 \003(\t\"\210\001\n\016FuzzyFindReply\0224\n\rstream_r"
  "esult\030\001 \001(\0132\033.clang.clangd.remote.Symbol"
  "H\000\0228\n\014final_result\030\002 \001(\0132 .clang.clangd."
  "remote.FinalResultH\000B\006\n\004kind\"9\n\013RefsRequ"
  "est\022\013\n\003ids\030\001 \003(\t\022\016\n\006filter\030\002 \001(\r\022\r\n\005limi"
  "t\030\003 \001(\r\"\200\001\n\tRefsReply\0221\n\rstream_result\030\001"
  " \001(\0132\030.clang.clangd.remote.RefH\000\0228\n\014fina"
  "l_result\030\002 \001(\0132 .clang.clangd.remote.Fin"
  "alResultH\000B\006\n\004kind\"\342\003\n\006Symbol\022\n\n\002id\030\001 \001("
  "\t\022-\n\004info\030\002 \001(\0132\037.clang.clangd.remote.Sy"
  "mbolInfo\022\014\n\004name\030\003 \001(\t\0227\n\ndefinition\030\004 \001"
  "(\0132#.clang.clangd.remote.SymbolLocation\022"
  "\r\n\005scope\030\005 \001(\t\022B\n\025canonical_declaration\030"
  "\006 \001(\0132#.clang.clangd.remote.SymbolLocati"
  "on\022\022\n\nreferences\030\007 \001(\005\022\016\n\006origin\030\010 \001(\r\022\021"
  "\n\tsignature\030\t \001(\t\022$\n\034template_specializa"
  "tion_args\030\n \001(\t\022!\n\031completion_snippet_su"
  "ffix\030\013 \001(\t\022\025\n\rdocumentation\030\014 \001(\t\022\023\n\013ret"
  "urn_type\030\r \001(\t\022\014\n\004type\030\016 \001(\t\022:\n\007headers\030"
  "\017 \003(\0132).clang.clangd.remote.HeaderWithRe"
  "ferences\022\r\n\005flags\030\020 \001(\r\"J\n\003Ref\0225\n\010locati"
  "on\030\001 \001(\0132#.clang.clangd.remote.SymbolLoc"
  "ation\022\014\n\004kind\030\002 \001(\r\"Q\n\nSymbolInfo\022\014\n\004kin"
  "d\030\001 \001(\r\022\017\n\007subkind\030\002 \001(\r\022\020\n\010language\030\003 \001"
  "(\r\022\022\n\nproperties\030\004 \001(\r\"}\n\016SymbolLocation"
  "\022,\n\005start\030\001 \001(\0132\035.clang.clangd.remote.Po"
  "sition\022*\n\003end\030\002 \001(\0132\035.clang.clangd.remot"
  "e.Position\022\021\n\tfile_path\030\003 \001(\t\"(\n\010Positio"
  "n\022\014\n\004line\030\001 \001(\r\022\016\n\006column\030\002 \001(\r\":\n\024Heade"
  "rWithReferences\022\016\n\006header\030\001 \001(\t\022\022\n\nrefer"
  "ences\030\002 \001(\r\"F\n\020RelationsRequest\022\020\n\010subje"
  "cts\030\001 \003(\t\022\021\n\tpredicate\030\002 \001(\r\022\r\n\005limit\030\003 "
  "\001(\r\"\212\001\n\016RelationsReply\0226\n\rstream_result\030"
  "\001 \001(\0132\035.clang.clangd.remote.RelationH\000\0228"
  "\n\014final_result\030\002 \001(\0132 .clang.clangd.remo"
  "te.FinalResultH\000B\006\n\004kind\"K\n\010Relation\022\022\n\n"
  "subject_id\030\001 \001(\t\022+\n\006object\030\002 \001(\0132\033.clang"
  ".clangd.remote.Symbol"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Index_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Index_2eproto = {
  false, false, 1901, descriptor_table_protodef_Index_2eproto, "Index.proto", 
  &descriptor_table_Index_2eproto_once, nullptr, 0, 16,
  schemas, file_default_instances, TableStruct_Index_2eproto::offsets,
  file_level_metadata_Index_2eproto, file_level_enum_descriptors_Index_2eproto, file_level_service_descriptors_Index_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Index_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Index_2eproto);
  return descriptor_table_Index_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Index_2eproto(&descriptor_table_Index_2eproto);
namespace clang {
namespace clangd {
namespace remote {

// ===================================================================

class FinalResult::_Internal {
 public:
  using HasBits = decltype(std::declval<FinalResult>()._has_bits_);
  static void set_has_has_more(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FinalResult::FinalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.FinalResult)
}
FinalResult::FinalResult(const FinalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  has_more_ = from.has_more_;
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.FinalResult)
}

void FinalResult::SharedCtor() {
has_more_ = false;
}

FinalResult::~FinalResult() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.FinalResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinalResult::ArenaDtor(void* object) {
  FinalResult* _this = reinterpret_cast< FinalResult* >(object);
  (void)_this;
}
void FinalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FinalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.FinalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_more_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_more = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_more(&has_bits);
          has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.FinalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_more = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_more(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.FinalResult)
  return target;
}

size_t FinalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.FinalResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_more = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.FinalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FinalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.FinalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.FinalResult)
    MergeFrom(*source);
  }
}

void FinalResult::MergeFrom(const FinalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.FinalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_has_more()) {
    _internal_set_has_more(from._internal_has_more());
  }
}

void FinalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.FinalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalResult::CopyFrom(const FinalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.FinalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalResult::IsInitialized() const {
  return true;
}

void FinalResult::InternalSwap(FinalResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_more_, other->has_more_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LookupRequest::_Internal {
 public:
};

LookupRequest::LookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.LookupRequest)
}
LookupRequest::LookupRequest(const LookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.LookupRequest)
}

void LookupRequest::SharedCtor() {
}

LookupRequest::~LookupRequest() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.LookupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupRequest::ArenaDtor(void* object) {
  LookupRequest* _this = reinterpret_cast< LookupRequest* >(object);
  (void)_this;
}
void LookupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.LookupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.LookupRequest.ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.LookupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.LookupRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.LookupRequest)
  return target;
}

size_t LookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.LookupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.LookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.LookupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.LookupRequest)
    MergeFrom(*source);
  }
}

void LookupRequest::MergeFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.LookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void LookupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.LookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupRequest::CopyFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.LookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupRequest::IsInitialized() const {
  return true;
}

void LookupRequest::InternalSwap(LookupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LookupReply::_Internal {
 public:
  static const ::clang::clangd::remote::Symbol& stream_result(const LookupReply* msg);
  static const ::clang::clangd::remote::FinalResult& final_result(const LookupReply* msg);
};

const ::clang::clangd::remote::Symbol&
LookupReply::_Internal::stream_result(const LookupReply* msg) {
  return *msg->kind_.stream_result_;
}
const ::clang::clangd::remote::FinalResult&
LookupReply::_Internal::final_result(const LookupReply* msg) {
  return *msg->kind_.final_result_;
}
void LookupReply::set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (stream_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_result);
    if (message_arena != submessage_arena) {
      stream_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_result, submessage_arena);
    }
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.LookupReply.stream_result)
}
void LookupReply::set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (final_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(final_result);
    if (message_arena != submessage_arena) {
      final_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_result, submessage_arena);
    }
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.LookupReply.final_result)
}
LookupReply::LookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.LookupReply)
}
LookupReply::LookupReply(const LookupReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Symbol::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.LookupReply)
}

void LookupReply::SharedCtor() {
clear_has_kind();
}

LookupReply::~LookupReply() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.LookupReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LookupReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void LookupReply::ArenaDtor(void* object) {
  LookupReply* _this = reinterpret_cast< LookupReply* >(object);
  (void)_this;
}
void LookupReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupReply::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:clang.clangd.remote.LookupReply)
  switch (kind_case()) {
    case kStreamResult: {
      if (GetArena() == nullptr) {
        delete kind_.stream_result_;
      }
      break;
    }
    case kFinalResult: {
      if (GetArena() == nullptr) {
        delete kind_.final_result_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void LookupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.LookupReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clang.clangd.remote.Symbol stream_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clang.clangd.remote.FinalResult final_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.LookupReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kStreamResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::stream_result(this), target, stream);
      break;
    }
    case kFinalResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::final_result(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.LookupReply)
  return target;
}

size_t LookupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.LookupReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .clang.clangd.remote.Symbol stream_result = 1;
    case kStreamResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.stream_result_);
      break;
    }
    // .clang.clangd.remote.FinalResult final_result = 2;
    case kFinalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.final_result_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.LookupReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.LookupReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.LookupReply)
    MergeFrom(*source);
  }
}

void LookupReply::MergeFrom(const LookupReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.LookupReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Symbol::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void LookupReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.LookupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupReply::CopyFrom(const LookupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.LookupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupReply::IsInitialized() const {
  return true;
}

void LookupReply::InternalSwap(LookupReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FuzzyFindRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FuzzyFindRequest>()._has_bits_);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_any_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_restricted_for_code_completion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FuzzyFindRequest::FuzzyFindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scopes_(arena),
  proximity_paths_(arena),
  preferred_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.FuzzyFindRequest)
}
FuzzyFindRequest::FuzzyFindRequest(const FuzzyFindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      scopes_(from.scopes_),
      proximity_paths_(from.proximity_paths_),
      preferred_types_(from.preferred_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArena());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&restricted_for_code_completion_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(restricted_for_code_completion_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.FuzzyFindRequest)
}

void FuzzyFindRequest::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&restricted_for_code_completion_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(restricted_for_code_completion_));
}

FuzzyFindRequest::~FuzzyFindRequest() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.FuzzyFindRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuzzyFindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FuzzyFindRequest::ArenaDtor(void* object) {
  FuzzyFindRequest* _this = reinterpret_cast< FuzzyFindRequest* >(object);
  (void)_this;
}
void FuzzyFindRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuzzyFindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FuzzyFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.FuzzyFindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  proximity_paths_.Clear();
  preferred_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&restricted_for_code_completion_) -
        reinterpret_cast<char*>(&limit_)) + sizeof(restricted_for_code_completion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuzzyFindRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.FuzzyFindRequest.query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.FuzzyFindRequest.scopes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool any_scope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_any_scope(&has_bits);
          any_scope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool restricted_for_code_completion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_restricted_for_code_completion(&has_bits);
          restricted_for_code_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string proximity_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proximity_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.FuzzyFindRequest.proximity_paths");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string preferred_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_preferred_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.FuzzyFindRequest.preferred_types");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuzzyFindRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.FuzzyFindRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.FuzzyFindRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.FuzzyFindRequest.scopes");
    target = stream->WriteString(2, s, target);
  }

  // optional bool any_scope = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_any_scope(), target);
  }

  // optional uint32 limit = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  // optional bool restricted_for_code_completion = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_restricted_for_code_completion(), target);
  }

  // repeated string proximity_paths = 6;
  for (int i = 0, n = this->_internal_proximity_paths_size(); i < n; i++) {
    const auto& s = this->_internal_proximity_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.FuzzyFindRequest.proximity_paths");
    target = stream->WriteString(6, s, target);
  }

  // repeated string preferred_types = 7;
  for (int i = 0, n = this->_internal_preferred_types_size(); i < n; i++) {
    const auto& s = this->_internal_preferred_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.FuzzyFindRequest.preferred_types");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.FuzzyFindRequest)
  return target;
}

size_t FuzzyFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.FuzzyFindRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string proximity_paths = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proximity_paths_.size());
  for (int i = 0, n = proximity_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proximity_paths_.Get(i));
  }

  // repeated string preferred_types = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(preferred_types_.size());
  for (int i = 0, n = preferred_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      preferred_types_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query());
    }

    // optional uint32 limit = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_limit());
    }

    // optional bool any_scope = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool restricted_for_code_completion = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuzzyFindRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.FuzzyFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FuzzyFindRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuzzyFindRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.FuzzyFindRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.FuzzyFindRequest)
    MergeFrom(*source);
  }
}

void FuzzyFindRequest::MergeFrom(const FuzzyFindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.FuzzyFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  proximity_paths_.MergeFrom(from.proximity_paths_);
  preferred_types_.MergeFrom(from.preferred_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      any_scope_ = from.any_scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      restricted_for_code_completion_ = from.restricted_for_code_completion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FuzzyFindRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.FuzzyFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuzzyFindRequest::CopyFrom(const FuzzyFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.FuzzyFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuzzyFindRequest::IsInitialized() const {
  return true;
}

void FuzzyFindRequest::InternalSwap(FuzzyFindRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scopes_.InternalSwap(&other->scopes_);
  proximity_paths_.InternalSwap(&other->proximity_paths_);
  preferred_types_.InternalSwap(&other->preferred_types_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FuzzyFindRequest, restricted_for_code_completion_)
      + sizeof(FuzzyFindRequest::restricted_for_code_completion_)
      - PROTOBUF_FIELD_OFFSET(FuzzyFindRequest, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuzzyFindRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FuzzyFindReply::_Internal {
 public:
  static const ::clang::clangd::remote::Symbol& stream_result(const FuzzyFindReply* msg);
  static const ::clang::clangd::remote::FinalResult& final_result(const FuzzyFindReply* msg);
};

const ::clang::clangd::remote::Symbol&
FuzzyFindReply::_Internal::stream_result(const FuzzyFindReply* msg) {
  return *msg->kind_.stream_result_;
}
const ::clang::clangd::remote::FinalResult&
FuzzyFindReply::_Internal::final_result(const FuzzyFindReply* msg) {
  return *msg->kind_.final_result_;
}
void FuzzyFindReply::set_allocated_stream_result(::clang::clangd::remote::Symbol* stream_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (stream_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_result);
    if (message_arena != submessage_arena) {
      stream_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_result, submessage_arena);
    }
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.FuzzyFindReply.stream_result)
}
void FuzzyFindReply::set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (final_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(final_result);
    if (message_arena != submessage_arena) {
      final_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_result, submessage_arena);
    }
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.FuzzyFindReply.final_result)
}
FuzzyFindReply::FuzzyFindReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.FuzzyFindReply)
}
FuzzyFindReply::FuzzyFindReply(const FuzzyFindReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Symbol::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.FuzzyFindReply)
}

void FuzzyFindReply::SharedCtor() {
clear_has_kind();
}

FuzzyFindReply::~FuzzyFindReply() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.FuzzyFindReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FuzzyFindReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void FuzzyFindReply::ArenaDtor(void* object) {
  FuzzyFindReply* _this = reinterpret_cast< FuzzyFindReply* >(object);
  (void)_this;
}
void FuzzyFindReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FuzzyFindReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FuzzyFindReply::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:clang.clangd.remote.FuzzyFindReply)
  switch (kind_case()) {
    case kStreamResult: {
      if (GetArena() == nullptr) {
        delete kind_.stream_result_;
      }
      break;
    }
    case kFinalResult: {
      if (GetArena() == nullptr) {
        delete kind_.final_result_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void FuzzyFindReply::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.FuzzyFindReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FuzzyFindReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clang.clangd.remote.Symbol stream_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clang.clangd.remote.FinalResult final_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuzzyFindReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.FuzzyFindReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kStreamResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::stream_result(this), target, stream);
      break;
    }
    case kFinalResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::final_result(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.FuzzyFindReply)
  return target;
}

size_t FuzzyFindReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.FuzzyFindReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .clang.clangd.remote.Symbol stream_result = 1;
    case kStreamResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.stream_result_);
      break;
    }
    // .clang.clangd.remote.FinalResult final_result = 2;
    case kFinalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.final_result_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuzzyFindReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.FuzzyFindReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FuzzyFindReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuzzyFindReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.FuzzyFindReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.FuzzyFindReply)
    MergeFrom(*source);
  }
}

void FuzzyFindReply::MergeFrom(const FuzzyFindReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.FuzzyFindReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Symbol::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void FuzzyFindReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.FuzzyFindReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuzzyFindReply::CopyFrom(const FuzzyFindReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.FuzzyFindReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuzzyFindReply::IsInitialized() const {
  return true;
}

void FuzzyFindReply::InternalSwap(FuzzyFindReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FuzzyFindReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RefsRequest>()._has_bits_);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RefsRequest::RefsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.RefsRequest)
}
RefsRequest::RefsRequest(const RefsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&filter_, &from.filter_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&filter_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.RefsRequest)
}

void RefsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&filter_)) + sizeof(limit_));
}

RefsRequest::~RefsRequest() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.RefsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RefsRequest::ArenaDtor(void* object) {
  RefsRequest* _this = reinterpret_cast< RefsRequest* >(object);
  (void)_this;
}
void RefsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.RefsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&filter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&filter_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.RefsRequest.ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filter(&has_bits);
          filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.RefsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.RefsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 filter = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_filter(), target);
  }

  // optional uint32 limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.RefsRequest)
  return target;
}

size_t RefsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.RefsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 filter = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_filter());
    }

    // optional uint32 limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.RefsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RefsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.RefsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.RefsRequest)
    MergeFrom(*source);
  }
}

void RefsRequest::MergeFrom(const RefsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.RefsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filter_ = from.filter_;
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RefsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.RefsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefsRequest::CopyFrom(const RefsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.RefsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefsRequest::IsInitialized() const {
  return true;
}

void RefsRequest::InternalSwap(RefsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefsRequest, limit_)
      + sizeof(RefsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(RefsRequest, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RefsReply::_Internal {
 public:
  static const ::clang::clangd::remote::Ref& stream_result(const RefsReply* msg);
  static const ::clang::clangd::remote::FinalResult& final_result(const RefsReply* msg);
};

const ::clang::clangd::remote::Ref&
RefsReply::_Internal::stream_result(const RefsReply* msg) {
  return *msg->kind_.stream_result_;
}
const ::clang::clangd::remote::FinalResult&
RefsReply::_Internal::final_result(const RefsReply* msg) {
  return *msg->kind_.final_result_;
}
void RefsReply::set_allocated_stream_result(::clang::clangd::remote::Ref* stream_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (stream_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_result);
    if (message_arena != submessage_arena) {
      stream_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_result, submessage_arena);
    }
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.RefsReply.stream_result)
}
void RefsReply::set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (final_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(final_result);
    if (message_arena != submessage_arena) {
      final_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_result, submessage_arena);
    }
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.RefsReply.final_result)
}
RefsReply::RefsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.RefsReply)
}
RefsReply::RefsReply(const RefsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Ref::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.RefsReply)
}

void RefsReply::SharedCtor() {
clear_has_kind();
}

RefsReply::~RefsReply() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.RefsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void RefsReply::ArenaDtor(void* object) {
  RefsReply* _this = reinterpret_cast< RefsReply* >(object);
  (void)_this;
}
void RefsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RefsReply::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:clang.clangd.remote.RefsReply)
  switch (kind_case()) {
    case kStreamResult: {
      if (GetArena() == nullptr) {
        delete kind_.stream_result_;
      }
      break;
    }
    case kFinalResult: {
      if (GetArena() == nullptr) {
        delete kind_.final_result_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void RefsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.RefsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clang.clangd.remote.Ref stream_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clang.clangd.remote.FinalResult final_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.RefsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kStreamResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::stream_result(this), target, stream);
      break;
    }
    case kFinalResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::final_result(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.RefsReply)
  return target;
}

size_t RefsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.RefsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .clang.clangd.remote.Ref stream_result = 1;
    case kStreamResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.stream_result_);
      break;
    }
    // .clang.clangd.remote.FinalResult final_result = 2;
    case kFinalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.final_result_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.RefsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RefsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.RefsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.RefsReply)
    MergeFrom(*source);
  }
}

void RefsReply::MergeFrom(const RefsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.RefsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Ref::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void RefsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.RefsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefsReply::CopyFrom(const RefsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.RefsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefsReply::IsInitialized() const {
  return true;
}

void RefsReply::InternalSwap(RefsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Symbol::_Internal {
 public:
  using HasBits = decltype(std::declval<Symbol>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::clang::clangd::remote::SymbolInfo& info(const Symbol* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::clang::clangd::remote::SymbolLocation& definition(const Symbol* msg);
  static void set_has_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::clang::clangd::remote::SymbolLocation& canonical_declaration(const Symbol* msg);
  static void set_has_canonical_declaration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_references(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_template_specialization_args(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_completion_snippet_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_documentation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::clang::clangd::remote::SymbolInfo&
Symbol::_Internal::info(const Symbol* msg) {
  return *msg->info_;
}
const ::clang::clangd::remote::SymbolLocation&
Symbol::_Internal::definition(const Symbol* msg) {
  return *msg->definition_;
}
const ::clang::clangd::remote::SymbolLocation&
Symbol::_Internal::canonical_declaration(const Symbol* msg) {
  return *msg->canonical_declaration_;
}
Symbol::Symbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.Symbol)
}
Symbol::Symbol(const Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scope()) {
    scope_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scope(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  template_specialization_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_template_specialization_args()) {
    template_specialization_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_specialization_args(), 
      GetArena());
  }
  completion_snippet_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_completion_snippet_suffix()) {
    completion_snippet_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_completion_snippet_suffix(), 
      GetArena());
  }
  documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_documentation()) {
    documentation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_documentation(), 
      GetArena());
  }
  return_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_return_type()) {
    return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_return_type(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::clang::clangd::remote::SymbolInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_definition()) {
    definition_ = new ::clang::clangd::remote::SymbolLocation(*from.definition_);
  } else {
    definition_ = nullptr;
  }
  if (from._internal_has_canonical_declaration()) {
    canonical_declaration_ = new ::clang::clangd::remote::SymbolLocation(*from.canonical_declaration_);
  } else {
    canonical_declaration_ = nullptr;
  }
  ::memcpy(&references_, &from.references_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&references_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.Symbol)
}

void Symbol::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
template_specialization_args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
completion_snippet_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
documentation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
return_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&info_)) + sizeof(flags_));
}

Symbol::~Symbol() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.Symbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Symbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_specialization_args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  completion_snippet_suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  documentation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete definition_;
  if (this != internal_default_instance()) delete canonical_declaration_;
}

void Symbol::ArenaDtor(void* object) {
  Symbol* _this = reinterpret_cast< Symbol* >(object);
  (void)_this;
}
void Symbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Symbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      template_specialization_args_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      completion_snippet_suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      documentation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      return_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(definition_ != nullptr);
      definition_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(canonical_declaration_ != nullptr);
      canonical_declaration_->Clear();
    }
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&references_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&references_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Symbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clang.clangd.remote.SymbolInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clang.clangd.remote.SymbolLocation definition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_definition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.scope");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clang.clangd.remote.SymbolLocation canonical_declaration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_canonical_declaration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 references = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_references(&has_bits);
          references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.signature");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string template_specialization_args = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_template_specialization_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.template_specialization_args");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string completion_snippet_suffix = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_completion_snippet_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.completion_snippet_suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string documentation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_documentation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.documentation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string return_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_return_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.return_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Symbol.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clang.clangd.remote.HeaderWithReferences headers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Symbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .clang.clangd.remote.SymbolInfo info = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional .clang.clangd.remote.SymbolLocation definition = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::definition(this), target, stream);
  }

  // optional string scope = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scope().data(), static_cast<int>(this->_internal_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.scope");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_scope(), target);
  }

  // optional .clang.clangd.remote.SymbolLocation canonical_declaration = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::canonical_declaration(this), target, stream);
  }

  // optional int32 references = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_references(), target);
  }

  // optional uint32 origin = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_origin(), target);
  }

  // optional string signature = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.signature");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_signature(), target);
  }

  // optional string template_specialization_args = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_specialization_args().data(), static_cast<int>(this->_internal_template_specialization_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.template_specialization_args");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_template_specialization_args(), target);
  }

  // optional string completion_snippet_suffix = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_completion_snippet_suffix().data(), static_cast<int>(this->_internal_completion_snippet_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.completion_snippet_suffix");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_completion_snippet_suffix(), target);
  }

  // optional string documentation = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_documentation().data(), static_cast<int>(this->_internal_documentation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.documentation");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_documentation(), target);
  }

  // optional string return_type = 13;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_return_type().data(), static_cast<int>(this->_internal_return_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.return_type");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_return_type(), target);
  }

  // optional string type = 14;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Symbol.type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_type(), target);
  }

  // repeated .clang.clangd.remote.HeaderWithReferences headers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_headers(i), target, stream);
  }

  // optional uint32 flags = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.Symbol)
  return target;
}

size_t Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.Symbol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clang.clangd.remote.HeaderWithReferences headers = 15;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string scope = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scope());
    }

    // optional string signature = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional string template_specialization_args = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_specialization_args());
    }

    // optional string completion_snippet_suffix = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_completion_snippet_suffix());
    }

    // optional string documentation = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_documentation());
    }

    // optional string return_type = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_return_type());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string type = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .clang.clangd.remote.SymbolInfo info = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .clang.clangd.remote.SymbolLocation definition = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_);
    }

    // optional .clang.clangd.remote.SymbolLocation canonical_declaration = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canonical_declaration_);
    }

    // optional int32 references = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_references());
    }

    // optional uint32 origin = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

    // optional uint32 flags = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Symbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  const Symbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Symbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.Symbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.Symbol)
    MergeFrom(*source);
  }
}

void Symbol::MergeFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_template_specialization_args(from._internal_template_specialization_args());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_completion_snippet_suffix(from._internal_completion_snippet_suffix());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_documentation(from._internal_documentation());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_return_type(from._internal_return_type());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_info()->::clang::clangd::remote::SymbolInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_definition()->::clang::clangd::remote::SymbolLocation::MergeFrom(from._internal_definition());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_canonical_declaration()->::clang::clangd::remote::SymbolLocation::MergeFrom(from._internal_canonical_declaration());
    }
    if (cached_has_bits & 0x00001000u) {
      references_ = from.references_;
    }
    if (cached_has_bits & 0x00002000u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00004000u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Symbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Symbol::CopyFrom(const Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Symbol::IsInitialized() const {
  return true;
}

void Symbol::InternalSwap(Symbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  template_specialization_args_.Swap(&other->template_specialization_args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  completion_snippet_suffix_.Swap(&other->completion_snippet_suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  documentation_.Swap(&other->documentation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_type_.Swap(&other->return_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Symbol, flags_)
      + sizeof(Symbol::flags_)
      - PROTOBUF_FIELD_OFFSET(Symbol, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Symbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ref::_Internal {
 public:
  using HasBits = decltype(std::declval<Ref>()._has_bits_);
  static const ::clang::clangd::remote::SymbolLocation& location(const Ref* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::clang::clangd::remote::SymbolLocation&
Ref::_Internal::location(const Ref* msg) {
  return *msg->location_;
}
Ref::Ref(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.Ref)
}
Ref::Ref(const Ref& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::clang::clangd::remote::SymbolLocation(*from.location_);
  } else {
    location_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.Ref)
}

void Ref::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&location_)) + sizeof(kind_));
}

Ref::~Ref() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.Ref)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ref::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void Ref::ArenaDtor(void* object) {
  Ref* _this = reinterpret_cast< Ref* >(object);
  (void)_this;
}
void Ref::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ref::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ref::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.Ref)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  kind_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ref::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clang.clangd.remote.SymbolLocation location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kind(&has_bits);
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ref::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.Ref)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clang.clangd.remote.SymbolLocation location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // optional uint32 kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.Ref)
  return target;
}

size_t Ref::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.Ref)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .clang.clangd.remote.SymbolLocation location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 kind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ref::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.Ref)
  GOOGLE_DCHECK_NE(&from, this);
  const Ref* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ref>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.Ref)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.Ref)
    MergeFrom(*source);
  }
}

void Ref::MergeFrom(const Ref& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.Ref)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::clang::clangd::remote::SymbolLocation::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ref::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.Ref)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ref::CopyFrom(const Ref& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.Ref)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ref::IsInitialized() const {
  return true;
}

void Ref::InternalSwap(Ref* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ref, kind_)
      + sizeof(Ref::kind_)
      - PROTOBUF_FIELD_OFFSET(Ref, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ref::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SymbolInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolInfo>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subkind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SymbolInfo::SymbolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.SymbolInfo)
}
SymbolInfo::SymbolInfo(const SymbolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&properties_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(properties_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.SymbolInfo)
}

void SymbolInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&properties_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(properties_));
}

SymbolInfo::~SymbolInfo() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.SymbolInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SymbolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SymbolInfo::ArenaDtor(void* object) {
  SymbolInfo* _this = reinterpret_cast< SymbolInfo* >(object);
  (void)_this;
}
void SymbolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SymbolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SymbolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.SymbolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&properties_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(properties_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kind(&has_bits);
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subkind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subkind(&has_bits);
          subkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_properties(&has_bits);
          properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.SymbolInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kind(), target);
  }

  // optional uint32 subkind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_subkind(), target);
  }

  // optional uint32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_language(), target);
  }

  // optional uint32 properties = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_properties(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.SymbolInfo)
  return target;
}

size_t SymbolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.SymbolInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 kind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kind());
    }

    // optional uint32 subkind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subkind());
    }

    // optional uint32 language = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_language());
    }

    // optional uint32 properties = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_properties());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.SymbolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.SymbolInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.SymbolInfo)
    MergeFrom(*source);
  }
}

void SymbolInfo::MergeFrom(const SymbolInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.SymbolInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      subkind_ = from.subkind_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000008u) {
      properties_ = from.properties_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.SymbolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolInfo::CopyFrom(const SymbolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.SymbolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolInfo::IsInitialized() const {
  return true;
}

void SymbolInfo::InternalSwap(SymbolInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolInfo, properties_)
      + sizeof(SymbolInfo::properties_)
      - PROTOBUF_FIELD_OFFSET(SymbolInfo, kind_)>(
          reinterpret_cast<char*>(&kind_),
          reinterpret_cast<char*>(&other->kind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SymbolLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<SymbolLocation>()._has_bits_);
  static const ::clang::clangd::remote::Position& start(const SymbolLocation* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::clang::clangd::remote::Position& end(const SymbolLocation* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::clang::clangd::remote::Position&
SymbolLocation::_Internal::start(const SymbolLocation* msg) {
  return *msg->start_;
}
const ::clang::clangd::remote::Position&
SymbolLocation::_Internal::end(const SymbolLocation* msg) {
  return *msg->end_;
}
SymbolLocation::SymbolLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.SymbolLocation)
}
SymbolLocation::SymbolLocation(const SymbolLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_path()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new ::clang::clangd::remote::Position(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::clang::clangd::remote::Position(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.SymbolLocation)
}

void SymbolLocation::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

SymbolLocation::~SymbolLocation() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.SymbolLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SymbolLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void SymbolLocation::ArenaDtor(void* object) {
  SymbolLocation* _this = reinterpret_cast< SymbolLocation* >(object);
  (void)_this;
}
void SymbolLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SymbolLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SymbolLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.SymbolLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymbolLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clang.clangd.remote.Position start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clang.clangd.remote.Position end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.SymbolLocation.file_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SymbolLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.SymbolLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clang.clangd.remote.Position start = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .clang.clangd.remote.Position end = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // optional string file_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.SymbolLocation.file_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.SymbolLocation)
  return target;
}

size_t SymbolLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.SymbolLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_path());
    }

    // optional .clang.clangd.remote.Position start = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .clang.clangd.remote.Position end = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.SymbolLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SymbolLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.SymbolLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.SymbolLocation)
    MergeFrom(*source);
  }
}

void SymbolLocation::MergeFrom(const SymbolLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.SymbolLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_path(from._internal_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start()->::clang::clangd::remote::Position::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_end()->::clang::clangd::remote::Position::MergeFrom(from._internal_end());
    }
  }
}

void SymbolLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.SymbolLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolLocation::CopyFrom(const SymbolLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.SymbolLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolLocation::IsInitialized() const {
  return true;
}

void SymbolLocation::InternalSwap(SymbolLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolLocation, end_)
      + sizeof(SymbolLocation::end_)
      - PROTOBUF_FIELD_OFFSET(SymbolLocation, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SymbolLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._has_bits_);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&line_)) + sizeof(column_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&line_)) + sizeof(column_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_) -
        reinterpret_cast<char*>(&line_)) + sizeof(column_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 line = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_line(), target);
  }

  // optional uint32 column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 line = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_line());
    }

    // optional uint32 column = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      line_ = from.line_;
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, column_)
      + sizeof(Position::column_)
      - PROTOBUF_FIELD_OFFSET(Position, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeaderWithReferences::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderWithReferences>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_references(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeaderWithReferences::HeaderWithReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.HeaderWithReferences)
}
HeaderWithReferences::HeaderWithReferences(const HeaderWithReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArena());
  }
  references_ = from.references_;
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.HeaderWithReferences)
}

void HeaderWithReferences::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
references_ = 0u;
}

HeaderWithReferences::~HeaderWithReferences() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.HeaderWithReferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeaderWithReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeaderWithReferences::ArenaDtor(void* object) {
  HeaderWithReferences* _this = reinterpret_cast< HeaderWithReferences* >(object);
  (void)_this;
}
void HeaderWithReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderWithReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderWithReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.HeaderWithReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    header_.ClearNonDefaultToEmpty();
  }
  references_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderWithReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.HeaderWithReferences.header");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_references(&has_bits);
          references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderWithReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.HeaderWithReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.HeaderWithReferences.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // optional uint32 references = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_references(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.HeaderWithReferences)
  return target;
}

size_t HeaderWithReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.HeaderWithReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_header());
    }

    // optional uint32 references = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_references());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderWithReferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.HeaderWithReferences)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderWithReferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderWithReferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.HeaderWithReferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.HeaderWithReferences)
    MergeFrom(*source);
  }
}

void HeaderWithReferences::MergeFrom(const HeaderWithReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.HeaderWithReferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      references_ = from.references_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeaderWithReferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.HeaderWithReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderWithReferences::CopyFrom(const HeaderWithReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.HeaderWithReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderWithReferences::IsInitialized() const {
  return true;
}

void HeaderWithReferences::InternalSwap(HeaderWithReferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(references_, other->references_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderWithReferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RelationsRequest>()._has_bits_);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RelationsRequest::RelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subjects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.RelationsRequest)
}
RelationsRequest::RelationsRequest(const RelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subjects_(from.subjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&predicate_, &from.predicate_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&predicate_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.RelationsRequest)
}

void RelationsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&predicate_)) + sizeof(limit_));
}

RelationsRequest::~RelationsRequest() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.RelationsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelationsRequest::ArenaDtor(void* object) {
  RelationsRequest* _this = reinterpret_cast< RelationsRequest* >(object);
  (void)_this;
}
void RelationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.RelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subjects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&predicate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&predicate_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string subjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subjects();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.RelationsRequest.subjects");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_predicate(&has_bits);
          predicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.RelationsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subjects = 1;
  for (int i = 0, n = this->_internal_subjects_size(); i < n; i++) {
    const auto& s = this->_internal_subjects(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.RelationsRequest.subjects");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 predicate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_predicate(), target);
  }

  // optional uint32 limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.RelationsRequest)
  return target;
}

size_t RelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.RelationsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subjects = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subjects_.size());
  for (int i = 0, n = subjects_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subjects_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 predicate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_predicate());
    }

    // optional uint32 limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_limit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.RelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.RelationsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.RelationsRequest)
    MergeFrom(*source);
  }
}

void RelationsRequest::MergeFrom(const RelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.RelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subjects_.MergeFrom(from.subjects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      predicate_ = from.predicate_;
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelationsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.RelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationsRequest::CopyFrom(const RelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.RelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationsRequest::IsInitialized() const {
  return true;
}

void RelationsRequest::InternalSwap(RelationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subjects_.InternalSwap(&other->subjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationsRequest, limit_)
      + sizeof(RelationsRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(RelationsRequest, predicate_)>(
          reinterpret_cast<char*>(&predicate_),
          reinterpret_cast<char*>(&other->predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationsReply::_Internal {
 public:
  static const ::clang::clangd::remote::Relation& stream_result(const RelationsReply* msg);
  static const ::clang::clangd::remote::FinalResult& final_result(const RelationsReply* msg);
};

const ::clang::clangd::remote::Relation&
RelationsReply::_Internal::stream_result(const RelationsReply* msg) {
  return *msg->kind_.stream_result_;
}
const ::clang::clangd::remote::FinalResult&
RelationsReply::_Internal::final_result(const RelationsReply* msg) {
  return *msg->kind_.final_result_;
}
void RelationsReply::set_allocated_stream_result(::clang::clangd::remote::Relation* stream_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (stream_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_result);
    if (message_arena != submessage_arena) {
      stream_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_result, submessage_arena);
    }
    set_has_stream_result();
    kind_.stream_result_ = stream_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.RelationsReply.stream_result)
}
void RelationsReply::set_allocated_final_result(::clang::clangd::remote::FinalResult* final_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (final_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(final_result);
    if (message_arena != submessage_arena) {
      final_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_result, submessage_arena);
    }
    set_has_final_result();
    kind_.final_result_ = final_result;
  }
  // @@protoc_insertion_point(field_set_allocated:clang.clangd.remote.RelationsReply.final_result)
}
RelationsReply::RelationsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.RelationsReply)
}
RelationsReply::RelationsReply(const RelationsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Relation::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.RelationsReply)
}

void RelationsReply::SharedCtor() {
clear_has_kind();
}

RelationsReply::~RelationsReply() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.RelationsReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void RelationsReply::ArenaDtor(void* object) {
  RelationsReply* _this = reinterpret_cast< RelationsReply* >(object);
  (void)_this;
}
void RelationsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelationsReply::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:clang.clangd.remote.RelationsReply)
  switch (kind_case()) {
    case kStreamResult: {
      if (GetArena() == nullptr) {
        delete kind_.stream_result_;
      }
      break;
    }
    case kFinalResult: {
      if (GetArena() == nullptr) {
        delete kind_.final_result_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void RelationsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.RelationsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clang.clangd.remote.Relation stream_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clang.clangd.remote.FinalResult final_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationsReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.RelationsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kStreamResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::stream_result(this), target, stream);
      break;
    }
    case kFinalResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::final_result(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.RelationsReply)
  return target;
}

size_t RelationsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.RelationsReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .clang.clangd.remote.Relation stream_result = 1;
    case kStreamResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.stream_result_);
      break;
    }
    // .clang.clangd.remote.FinalResult final_result = 2;
    case kFinalResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.final_result_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationsReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.RelationsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationsReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationsReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.RelationsReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.RelationsReply)
    MergeFrom(*source);
  }
}

void RelationsReply::MergeFrom(const RelationsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.RelationsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kStreamResult: {
      _internal_mutable_stream_result()->::clang::clangd::remote::Relation::MergeFrom(from._internal_stream_result());
      break;
    }
    case kFinalResult: {
      _internal_mutable_final_result()->::clang::clangd::remote::FinalResult::MergeFrom(from._internal_final_result());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void RelationsReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.RelationsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationsReply::CopyFrom(const RelationsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.RelationsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationsReply::IsInitialized() const {
  return true;
}

void RelationsReply::InternalSwap(RelationsReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationsReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Relation::_Internal {
 public:
  using HasBits = decltype(std::declval<Relation>()._has_bits_);
  static void set_has_subject_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::clang::clangd::remote::Symbol& object(const Relation* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::clang::clangd::remote::Symbol&
Relation::_Internal::object(const Relation* msg) {
  return *msg->object_;
}
Relation::Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clang.clangd.remote.Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subject_id()) {
    subject_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject_id(), 
      GetArena());
  }
  if (from._internal_has_object()) {
    object_ = new ::clang::clangd::remote::Symbol(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clang.clangd.remote.Relation)
}

void Relation::SharedCtor() {
subject_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_ = nullptr;
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:clang.clangd.remote.Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void Relation::ArenaDtor(void* object) {
  Relation* _this = reinterpret_cast< Relation* >(object);
  (void)_this;
}
void Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:clang.clangd.remote.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subject_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string subject_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clang.clangd.remote.Relation.subject_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clang.clangd.remote.Symbol object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clang.clangd.remote.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string subject_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subject_id().data(), static_cast<int>(this->_internal_subject_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "clang.clangd.remote.Relation.subject_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject_id(), target);
  }

  // optional .clang.clangd.remote.Symbol object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clang.clangd.remote.Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clang.clangd.remote.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string subject_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subject_id());
    }

    // optional .clang.clangd.remote.Symbol object = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clang.clangd.remote.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clang.clangd.remote.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clang.clangd.remote.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clang.clangd.remote.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_subject_id(from._internal_subject_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object()->::clang::clangd::remote::Symbol::MergeFrom(from._internal_object());
    }
  }
}

void Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clang.clangd.remote.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clang.clangd.remote.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subject_id_.Swap(&other->subject_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
}  // namespace clangd
}  // namespace clang
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::FinalResult* Arena::CreateMaybeMessage< ::clang::clangd::remote::FinalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::FinalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::LookupRequest* Arena::CreateMaybeMessage< ::clang::clangd::remote::LookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::LookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::LookupReply* Arena::CreateMaybeMessage< ::clang::clangd::remote::LookupReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::LookupReply >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::FuzzyFindRequest* Arena::CreateMaybeMessage< ::clang::clangd::remote::FuzzyFindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::FuzzyFindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::FuzzyFindReply* Arena::CreateMaybeMessage< ::clang::clangd::remote::FuzzyFindReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::FuzzyFindReply >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::RefsRequest* Arena::CreateMaybeMessage< ::clang::clangd::remote::RefsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::RefsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::RefsReply* Arena::CreateMaybeMessage< ::clang::clangd::remote::RefsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::RefsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::Symbol* Arena::CreateMaybeMessage< ::clang::clangd::remote::Symbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::Ref* Arena::CreateMaybeMessage< ::clang::clangd::remote::Ref >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::Ref >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::SymbolInfo* Arena::CreateMaybeMessage< ::clang::clangd::remote::SymbolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::SymbolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::SymbolLocation* Arena::CreateMaybeMessage< ::clang::clangd::remote::SymbolLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::SymbolLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::Position* Arena::CreateMaybeMessage< ::clang::clangd::remote::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::HeaderWithReferences* Arena::CreateMaybeMessage< ::clang::clangd::remote::HeaderWithReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::HeaderWithReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::RelationsRequest* Arena::CreateMaybeMessage< ::clang::clangd::remote::RelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::RelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::RelationsReply* Arena::CreateMaybeMessage< ::clang::clangd::remote::RelationsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::RelationsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::clang::clangd::remote::Relation* Arena::CreateMaybeMessage< ::clang::clangd::remote::Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clang::clangd::remote::Relation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
